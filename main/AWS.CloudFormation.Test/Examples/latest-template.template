{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "This template creates a VPC infrastructure for a multi-AZ, multi-tier deployment of a Windows based Application infrstructure. It installs 2 Active Directory Domain Controllers into subnets in seperate AZs inside a VPC, as well as Remote Desktop Gateway and NAT instances into the DMZ for each Availability Zone. The default Domain Administrator  will be the one retrieved from the instance.  For adding members to the domain, ensure that they are launched into the domain member security group created by this template and then configure them to use the AD instances fixed private IP addresses as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters"               : {
        "CookbookURL" : {
            "Description" : "Name of current cookbook TAR file",
            "Type"        : "String",
            "Default"     : "https://s3.amazonaws.com/gtbb/software/cookbooks-1428375204.tar.gz"
        },
        "PsToolsURL" : {
            "Description" : "URL of PSTools.zip",
            "Type"        : "String",
            "Default"     : "https://download.sysinternals.com/files/PSTools.zip"
        },
		
        "ChefConfigRbContent" : {
            "Description" : "Content of the client.rb",
            "Type"        : "String",
            "Default"     : "cache_path 'c:/chef'\ncookbook_path 'c:/chef/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
        },
        "S3AccessKeyId" : {
            "Description" : "Key To Access S3 resources",
            "Type"        : "String",
            "Default"     : "AKIAJHYXG5B3KNOGGOVA",
			"NoEcho"		: "true"
		},
        "S3AccessSecret" : {
            "Description" : "Secret To Access S3 resources",
            "Type"        : "String",
            "Default"     : "c2xfAMXNrz0ixJUS92qJ7tdlg11l2U9xWUkX5DXz",
			"NoEcho"		: "true"
		},
		"KeyPairName" : {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type"        : "AWS::EC2::KeyPair::KeyName",
            "Default"     : "corp.getthebuybox.com"
        },
        "DomainDNSName" : {
            "Description" : "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "Type"        : "String",
            "Default"     : "CORP.GETTHEBUYBOX.COM",
            "MinLength"   : "3",
            "MaxLength"   : "25",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DomainNetBIOSName" : {
            "Description" : "NetBIOS name of the domain (upto 15 characters) for users of earlier versions of Windows e.g. EXAMPLE",
            "Type"        : "String",
            "Default"     : "GTBB",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "DomainAdminUser"   : {
            "Description" : "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
            "Type"        : "String",
            "Default"     : "johnny",
            "MinLength"   : "5",
            "MaxLength"   : "25",
            "AllowedPattern" : "[a-zA-Z0-9]*"
        },
        "DomainAdminPassword" : {
            "Description" : "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho"         : "true",
            "Default"        : "3ORMSkQCxbNo"
        },
        "RestoreModePassword" : {
            "Description" : "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho"         : "True",
            "Default"        : "T9OCVuau60fV"
        },
        "UserCount"           : {
            "Description" : "Total number of test user accounts to create in Active Directory",
            "Type"        : "Number",
            "Default"     : "1"
        },
        "VPCCIDR"             : {
            "Description" : "CIDR Block for the VPC",
            "Type"        : "String",
            "Default"     : "10.0.0.0/16",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "ADInstanceType"      : {
            "Description" : "Amazon EC2 instance type for the first Active Directory Instance",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "t2.micro",
				"t2.small",
                "m3.medium",
                "m3.2xlarge",
                "c4.4xlarge"
            ]
        },
        "ADServer1NetBIOSName" : {
            "Description" : "NetBIOS name of the 1st AD Server (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "DC1",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "AD1SubnetCIDR"        : {
            "Description" : "AD1 CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.4.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DC1PrivateIp"         : {
            "Description" : "Fixed private IP for the first Active Directory server located in AZ1",
            "Type"        : "String",
            "Default"     : "10.0.4.10"
        },
        "AD2InstanceType"      : {
            "Description" : "Amazon EC2 instance type for the second Active Directory Instance",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "m1.small",
                "t2.micro",
                "m1.large",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "t2.micro",
                "c1.medium",
                "c1.xlarge"
            ]
        },
        "ADServer2NetBIOSName" : {
            "Description" : "NetBIOS name of the 2nd AD Server (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "DC2",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "AD2SubnetCIDR"        : {
            "Description" : "AD2 CIDR Block (AZ2)",
            "Type"        : "String",
            "Default"     : "10.0.12.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DC2PrivateIp"         : {
            "Description" : "Fixed private IP for the second Active Directory serverr located in AZ2",
            "Type"        : "String",
            "Default"     : "10.0.12.10"
        },
        "NATInstanceType"      : {
            "Description" : "Amazon EC2 instance type for the NAT Instances",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "t2.micro",
                "t2.medium"
            ]
        },
        "RDGWInstanceType"     : {
            "Description" : "Amazon EC2 instance type for the Remote Desktop Gatweway Instance",
            "Type"        : "String",
            "Default"     : "t2.micro",
            "AllowedValues" : [
                "m1.small",
                "t2.micro",
                "m1.large",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "t2.micro",
                "c1.medium",
                "c1.xlarge"
            ]
        },
        "DMZAZ1CIDR"             : {
            "Description" : "CIDR Block for the Public DMZ Subnet located in AZ1",
            "Type"        : "String",
            "Default"     : "10.0.0.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DMZAZ2CIDR"             : {
            "Description" : "CIDR Block for the Public DMZ Subnet located in AZ2",
            "Type"        : "String",
            "Default"     : "10.0.8.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "SQL1InstanceType"     : {
            "Description" : "Amazon EC2 instance type for the SQL1 Instance",
            "Type"        : "String",
            "Default"     : "t2.small",
            "AllowedValues" : [
                "m3.medium",
                "t2.small",
				"c4.4xlarge"
            ]
        },
        "SQL1NetBIOSName"      : {
            "Description" : "NetBIOS name of the SQL1 (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "SQL1",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "SqlServer1PrivateIp"  : {
            "Description" : "Fixed private IP for the first Active Directory server located in AZ1",
            "Type"        : "String",
            "Default"     : "10.0.5.10"
        },
        "SqlServer1SubnetCIDR" : {
            "Description" : "Database Tier CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.5.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "TFSServer1InstanceType" : {
            "Description" : "Amazon EC2 instance type for the TFSServer1 Instance",
            "Type"        : "String",
            "Default"     : "t2.small",
            "AllowedValues" : [
                "m1.small",
                "t2.micro",
                "m1.large",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "t2.micro",
                "c1.medium",
                "t2.small"
            ]
        },
        "TFSServer1NetBIOSName"  : {
            "Description" : "NetBIOS name of the TFSServer1 (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "TFSServer1",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "TFSServer1PrivateIp"    : {
            "Description" : "Fixed private IP for the TFS Server",
            "Type"        : "String",
            "Default"     : "10.0.6.12"
        },
        "TFSServer1SubnetCIDR"   : {
            "Description" : "TFS Application Tier CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.6.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "TFSServer1IpAddressCIDR" : {
            "Description" : "TFS Tier CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.6.12/32",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "Build1InstanceType"      : {
            "Description" : "Amazon EC2 instance type for the Build1 Instance",
            "Type"        : "String",
            "Default"     : "t2.small",
            "AllowedValues" : [
                "m1.small",
                "t2.micro",
                "m1.large",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "t2.micro",
                "c1.medium",
                "t2.small"
            ]
        },
        "Build1NetBIOSName"       : {
            "Description" : "NetBIOS name of the Build1 (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "BUILD1",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "BuildServer1PrivateIp"   : {
            "Description" : "Fixed private IP for the Build1 server located in AZ1",
            "Type"        : "String",
            "Default"     : "10.0.3.10"
        },
        "BuildServer1SubnetCIDR"  : {
            "Description" : "Build Server Tier CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.3.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "BuildServer1IpAddressCIDR" : {
            "Description" : "Database Tier CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.3.10/32",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "WorkstationInstanceType"   : {
            "Description" : "Amazon EC2 instance type for the Build1 Instance",
            "Type"        : "String",
            "Default"     : "m3.large",
            "AllowedValues" : [
                "m3.large",
				"t2.small",
                "m3.medium",
                "m3.2xlarge",
                "c4.4xlarge"
            ]
        },
        "WorkstationNetBIOSName"    : {
            "Description" : "NetBIOS name of the Workstation (upto 15 characters)",
            "Type"        : "String",
            "Default"     : "WORKSTATION36",
            "MinLength"   : "1",
            "MaxLength"   : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "WorkstationSubnetCIDR"     : {
            "Description" : "Workstation Tier CIDR Block (AZ1)",
            "Type"        : "String",
            "Default"     : "10.0.1.0/24",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
		"ChefAddToDomainCommandText" : {
			"Type" : "String",
			"Default" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::AddToDomain]'"
		},
		"ChefInstallMsiSource" : {
			"Type" : "String",
			"Default" : "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2008r2/x86_64/chefdk-0.4.0-1.msi"
		},
		"AWSCLIMsiSource" : {
			"Type" : "String",
			"Default" : "https://s3.amazonaws.com/aws-cli/AWSCLI64.msi"
		},
		"ChromeMsiSource" : {
			"Type" : "String",
			"Default" : "https://dl-ssl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7B806F36C0-CB54-4A84-A3F3-0CF8A86575E0%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dfalse/edgedl/chrome/install/GoogleChromeStandaloneEnterprise.msi"
		}
    },
    "Mappings"                 : {
        "AWSInstanceType2Arch" : {
            "m1.small" : {
                "Arch" : "64"
            },
            "m3.medium" : {
                "Arch" : "64"
            },
            "m1.large"  : {
                "Arch" : "64"
            },
            "t2.micro"  : {
                "Arch" : "64"
            },
            "t2.medium" : {
                "Arch" : "64"
            },
            "m2.xlarge" : {
                "Arch" : "64"
            },
            "m2.2xlarge" : {
                "Arch" : "64"
            },
            "m2.4xlarge" : {
                "Arch" : "64"
            },
            "c1.medium"  : {
                "Arch" : "64"
            },
            "c4.4xlarge"  : {
                "Arch" : "64"
            },
            "c1.xlarge"  : {
                "Arch" : "64"
            }
        },
        "AWSRegionArch2AMI"    : {
            "us-east-1" : {
                "64" : "ami-917932fb"
            },
            "us-west-2" : {
                "64" : "ami-7f634e4f"
            },
            "us-west-1" : {
                "64" : "ami-52869d17"
            },
            "eu-west-1" : {
                "64" : "ami-69ae251e"
            },
            "eu-central-1" : {
                "64" : "ami-ea8bb8f7"
            },
            "ap-southeast-1" : {
                "64" : "ami-d0eedb82"
            },
            "ap-northeast-1" : {
                "64" : "ami-a79572a7"
            },
            "sa-east-1"      : {
                "64" : "ami-2b378836"
            },
            "ap-southeast-2" : {
                "64" : "ami-89a2d5b3"
            }
        },
        "AWSRegionArchNatAMI"  : {
            "us-east-1" : {
                "64" : "ami-4c9e4b24"
            },
            "us-west-2" : {
                "64" : "ami-bb69128b"
            },
            "us-west-1" : {
                "64" : "ami-2b2b296e"
            },
            "eu-west-1" : {
                "64" : "ami-3760b040"
            },
            "eu-central-1" : {
                "64" : "ami-204c7a3d"
            },
            "ap-southeast-1" : {
                "64" : "ami-b082dae2"
            },
            "ap-southeast-2" : {
                "64" : "ami-996402a3"
            },
            "ap-northeast-1" : {
                "64" : "ami-55c29e54"
            },
            "sa-east-1"      : {
                "64" : "ami-b972dba4"
            }
        }
    },
    "Resources"                : {
        "AZ1PrivateRouteTable"               : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Network",
                        "Value" : "AZ1 Private"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "AZ1 Route Table (AZ1-0.0.0.0/0)"
                    }
                ]
            }
        },
        "AZ1PrivateSubnetRouteTableAssociation"     : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "AZ1Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "AZ1PrivateRouteTable"
                }
            }
        },
        "AZ2PrivateSubnetRouteTableAssociation"     : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "AZ2Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "AZ2PrivateRouteTable"
                }
            }
        },
        "AZ2PrivateRouteTable"              : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Network",
                        "Value" : "AZ2 Private"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "AZ2 Route Table (AZ2-0.0.0.0/0)"
                    }
                ]
            }
        },
        "AZ1Subnet"                 : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "AD1SubnetCIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        0,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "AD1 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "AD1 Subnet"
                    }
                ]
            }
        },
        "AZ2Subnet"                 : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "AD2SubnetCIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        1,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "AD2 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "AD2 Subnet"
                    }
                ]
            }
        },
        "BuildServer1SubnetAZ1"            : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "BuildServer1SubnetCIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        1,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "BuildServer Subnet (AZ1)"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "BuildServer Subnet (AZ1)"
                    }
                ]
            }
        },
        "BuildServer1RouteTable"          : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Name",
                        "Value" : "BuildServer1 Route Table"
                    }
                ]
            }
        },
        "BuildServer1Route"               : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "BuildServer1RouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT1"
                }
            }
        },
        "BuildServer1"                    : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "TFSServer1WaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "accessKeyId" : { "Ref" : "S3AccessKeyId" },
                        "secretKey"   : { "Ref" : "S3AccessSecret" },
                        "buckets"     : [
                            "gtbb"
                        ]
                    }
                },
                "AWS::CloudFormation::Init"           : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "addToDomain",
                            "installTFS"
                        ]
                    },
                    "installTFS"  : {
                        "commands" : {
                            "1-TFS" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "c:\\opscode\\chefdk\\bin\\chef-client --runlist 'recipe[TFS::build]'"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "setup"       : {
                        "files" : {
							"c:\\chef\\client.rb" : { "content" : { "Ref" : "ChefConfigRbContent" }},
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.TFSServer1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r BuildServer1",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\chef\\node.json" : {
                                "content" : {
                                    "ActiveDirectory" : {
                                        "name" : {
                                            "Ref" : "Build1NetBIOSName"
                                        },
                                        "DC1PrivateIp" : {
                                            "Ref" : "DC1PrivateIp"
                                        },
                                        "DC2PrivateIp" : {
                                            "Ref" : "DC2PrivateIp"
                                        },
                                        "DomainDNSName" : {
                                            "Ref" : "DomainDNSName"
                                        },
                                        "DomainNetBIOSName" : {
                                            "Ref" : "DomainNetBIOSName"
                                        },
                                        "DomainAdminUser"   : {
                                            "Ref" : "DomainAdminUser"
                                        },
                                        "DomainAdminPassword" : {
                                            "Ref" : "DomainAdminPassword"
                                        }
                                    },
									"s3_file" : {
										"key" : { "Ref" : "S3AccessKeyId" },
										"secret" : { "Ref" : "S3AccessSecret" }
									}
                                }
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
						"packages" : {
							"awscli" : { "Ref" : "AWSCLIMsiSource" },
							"msi" : {	"chef" : { "Ref" : "ChefInstallMsiSource" }}
						},
                        "sources" : {
                            "c:\\chef\\" : { "Ref" : "CookbookURL" },
							"c:\\tools\\pstools\\" : { "Ref" : "PsToolsURL" }
                        }
                    },
                    "rename"      : {
                        "commands" : {
                            "1-Rename" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::Rename]'",
                                "test"    : {
									"Fn::Join" : [
										"",
										[
											"cmd /c \"if %COMPUTERNAME%==",
                                            { "Ref" : "Build1NetBIOSName" },
											" (EXIT 1) ELSE (EXIT 0)\""
										]
									]
								}
                            }
                        }
                    },
                    "addToDomain" : {
                        "commands" : {
                            "1-AddToDomain" : {
								"command" : { "Ref" : "ChefAddToDomainCommandText" } 
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "Build1InstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "BuildServer1SubnetAZ1"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "BUILD1"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "100",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainMemberSG"
                    },
                    {
                        "Ref" : "BuildServer1SecurityGroup"
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "PrivateIpAddress"    : {
                    "Ref" : "BuildServer1PrivateIp"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r BuildServer1",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BuildServer1SecurityGroup"                      : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable TFS type access from approved resources",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "BuildServer1SecurityGroup"
                    }
                ],
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9191",
                        "ToPort"     : "9191",
                        "CidrIp"     : {
                            "Ref" : "TFSServer1IpAddressCIDR"
                        }
                    }
                ]
            }
        },
        "BuildServer1SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "BuildServer1SubnetAZ1"
                },
                "RouteTableId" : {
                    "Ref" : "BuildServer1RouteTable"
                }
            }
        },
        "DhcpOptions" : {
            "Type" : "AWS::EC2::DHCPOptions",
            "Properties" : {
                "DomainName" : {
                    "Ref" : "DomainDNSName"
                },
                "DomainNameServers" : [
                    "AmazonProvidedDNS"
                ],
                "NtpServers"        : [
                    {
                        "Ref" : "DC1PrivateIp"
                    }
                ],
                "NetbiosNameServers" : [
                    {
                        "Ref" : "DC1PrivateIp"
                    },
                    {
                        "Ref" : "DC2PrivateIp"
                    }
                ],
                "NetbiosNodeType"    : "2",
                "Tags"               : [
                    {
                        "Key" : "Domain",
                        "Value" : {
                            "Ref" : "DomainDNSName"
                        }
                    },
                    {
                        "Key" : "Name",
                        "Value" : "DhcpOptions"
                    }
                ]
            }
        },
        "DomainControllerSG1"                     : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Domain Controller",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5985",
                        "ToPort"     : "5985",
                        "CidrIp"     : {
                            "Ref" : "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "123",
                        "ToPort"     : "123",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "135",
                        "ToPort"     : "135",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "138",
                        "ToPort"     : "138",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "636",
                        "ToPort"     : "636",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3268",
                        "ToPort"     : "3268",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3269",
                        "ToPort"     : "3269",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "5355",
                        "ToPort"     : "5355",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "137",
                        "ToPort"     : "137",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "139",
                        "ToPort"     : "139",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5722",
                        "ToPort"     : "5722",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "123",
                        "ToPort"     : "123",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "135",
                        "ToPort"     : "135",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "138",
                        "ToPort"     : "138",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "636",
                        "ToPort"     : "636",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3268",
                        "ToPort"     : "3268",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3269",
                        "ToPort"     : "3269",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ2CIDR"
                        }
                    }
                ],
                "Tags"               : [
                    {
                        "Key" : "Name",
                        "Value" : "DomainControllerSG1"
                    }
                ]
            }
        },
        "DomainControllerSG2"                     : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Domain Controller",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5985",
                        "ToPort"     : "5985",
                        "CidrIp"     : {
                            "Ref" : "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "123",
                        "ToPort"     : "123",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "135",
                        "ToPort"     : "135",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "138",
                        "ToPort"     : "138",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "636",
                        "ToPort"     : "636",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3268",
                        "ToPort"     : "3268",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3269",
                        "ToPort"     : "3269",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "5355",
                        "ToPort"     : "5355",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "137",
                        "ToPort"     : "137",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "139",
                        "ToPort"     : "139",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "5722",
                        "ToPort"     : "5722",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "123",
                        "ToPort"     : "123",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "135",
                        "ToPort"     : "135",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "9389",
                        "ToPort"     : "9389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "138",
                        "ToPort"     : "138",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "445",
                        "ToPort"     : "445",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "464",
                        "ToPort"     : "464",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "389",
                        "ToPort"     : "389",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "636",
                        "ToPort"     : "636",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3268",
                        "ToPort"     : "3268",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3269",
                        "ToPort"     : "3269",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "88",
                        "ToPort"     : "88",
                        "SourceSecurityGroupId" : {
                            "Ref" : "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ2CIDR"
                        }
                    }
                ],
                "Tags"               : [
                    {
                        "Key" : "Name",
                        "Value" : "DomainControllerSG2"
                    }
                ]
            }
        },
        "DomainMemberSG"                          : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Domain Members",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "53",
                        "ToPort"     : "53",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "49152",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : {
                            "Ref" : "DMZAZ2CIDR"
                        }
                    }
                ]
            }
        },
        "DomainController"                        : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "NAT2",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "installADDS",
                            "configureSites",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DomainController.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r DomainController",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1"       : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\New-LabADUser.ps1"      : {
                                "source" : "https://s3.amazonaws.com/CFN_WS2012_Scripts/AD/New-LabADUser.ps1"
                            },
                            "c:\\cfn\\scripts\\users.csv"              : {
                                "source" : "https://s3.amazonaws.com/CFN_WS2012_Scripts/AD/users.csv"
                            },
                            "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1" : {
                                "source" : "https://s3.amazonaws.com/quickstart-reference/microsoft/activedirectory/latest/scripts/ConvertTo-EnterpriseAdmin.ps1"
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-disable-win-fw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "a-set-static-ip" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "45"
                            },
                            "b-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe Rename-Computer -NewName ",
                                            {
                                                "Ref" : "ADServer1NetBIOSName"
                                            },
                                            " -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installADDS" : {
                        "commands" : {
                            "1-install-prereqs" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "2-install-adds"    : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"Install-ADDSForest -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " ",
                                            "-SafeModeAdministratorPassword (convertto-securestring ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -asplaintext -force) ",
                                            "-DomainMode Win2012 ",
                                            "-DomainNetbiosName ",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            " ",
                                            "-ForestMode Win2012 ",
                                            "-Confirm:$false ",
                                            "-Force\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            },
                            "3-restart-service" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command Restart-Service NetLogon -EA 0"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "180"
                            },
                            "4-create-adminuser" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"New-ADUser ",
                                            "-Name ",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            " ",
                                            "-UserPrincipalName ",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "@",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "5-update-adminuser" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "6-run-CreateUsers-script" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\New-LabADUser.ps1 -Count ",
                                            {
                                                "Ref" : "UserCount"
                                            },
                                            " -UpnSuffix ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Password p@ssword123 -EA 0"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configureSites" : {
                        "commands" : {
                            "a-rename-default-site" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "\"",
                                            "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "b-create-site-2"       : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe New-ADReplicationSite AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "c-create-DMZAZ1Subnet-1"  : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "DMZAZ1CIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "d-create-DMZAZ1Subnet-2"  : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "DMZAZ2CIDR"
                                            },
                                            " -Site AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "e-create-subnet-1"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "AD1SubnetCIDR"
                                            },
                                            " -Site AZ1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "f-create-subnet-2"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            {
                                                "Ref" : "AD2SubnetCIDR"
                                            },
                                            " -Site AZ2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "m-set-site-link"       : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-ADReplicationSiteLink -Filter * | Set-ADReplicationSiteLink -SitesIncluded @{add='AZ2'} -ReplicationFrequencyInMinutes 15\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "finalize"       : {
                        "commands" : {
                            "a-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "DomainControllerWaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "ADInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "ADInstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "AZ1Subnet"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "ADServer1NetBIOSName"
                        }
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainControllerSG1"
                    }
                ],
                "PrivateIpAddress"    : {
                    "Ref" : "DC1PrivateIp"
                },
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r DomainController",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DomainController2"                       : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainControllerWaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "join",
                            "addDomainController",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DomainController2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r DomainController2",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1"       : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "DC1PrivateIp"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-disable-win-fw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "a-set-static-ip" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "45"
                            },
                            "b-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe Rename-Computer -NewName ",
                                            {
                                                "Ref" : "ADServer2NetBIOSName"
                                            },
                                            " -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "join"       : {
                        "commands" : {
                            "a-join-domain" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Add-Computer -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "addDomainController" : {
                        "commands" : {
                            "1-install-prereqs" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "2-add-dc"          : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Install-ADDSDomainController -InstallDns -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-SafeModeAdministratorPassword ",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force) ",
                                            "-Confirm:$false -Force\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "finalize"            : {
                        "commands" : {
                            "a-update-dns-servers-dc2" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "DC1PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "DC2PrivateIp"
                                            },
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "b-update-dns-servers-dc1" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command ",
                                            "\"Invoke-Command -Scriptblock{ ",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "DC2PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "DC1PrivateIp"
                                            },
                                            " } -ComputerName ",
                                            {
                                                "Ref" : "ADServer1NetBIOSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "c-signal-success"         : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "DomainController2WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "AD2InstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "AZ2Subnet"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "ADServer2NetBIOSName"
                        }
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainControllerSG2"
                    }
                ],
                "PrivateIpAddress"    : {
                    "Ref" : "DC2PrivateIp"
                },
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r DomainController2",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DomainControllerWaitCondition"           : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "DomainController",
            "Properties" : {
                "Handle" : {
                    "Ref" : "DomainControllerWaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "DomainControllerWaitHandle"              : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "DomainController2WaitCondition"          : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "DomainController2",
            "Properties" : {
                "Handle" : {
                    "Ref" : "DomainController2WaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "DomainController2WaitHandle"             : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "DMZAZ1Subnet"                 : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "DMZAZ1CIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        0,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "DMZ 1 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "DMZ AZ1 Subnet"
                    }
                ]
            }
        },
        "DMZAZ2Subnet"                : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "DMZAZ2CIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        1,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "DMZ 2 Subnet"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "DMZ AZ2 Subnet"
                    }
                ]
            }
        },
        "DMZRouteTable"             : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Network",
                        "Value" : "DMZ"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "DMZ Route Table (DMZ-InternetGateway)"
                    }
                ]
            }
        },
        "DMZRoute"                  : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "DMZRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId"            : {
                    "Ref" : "VPCInternetGateway"
                }
            }
        },
        "DMZAZ1SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "DMZAZ1Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "DMZRouteTable"
                }
            }
        },
        "DMZAZ2SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "DMZAZ2Subnet"
                },
                "RouteTableId" : {
                    "Ref" : "DMZRouteTable"
                }
            }
        },
        "NATSecurityGroup"                        : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enables SSH access to NAT1 in AZ1 via port 22 and outbound internet access via private subnets",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "22",
                        "ToPort"     : "22",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "AD1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "AD2SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "SqlServer1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "SqlServer1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "TFSServer1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "TFSServer1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "BuildServer1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "BuildServer1SubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort"   : "1",
                        "ToPort"     : "65535",
                        "CidrIp"     : {
                            "Ref" : "WorkstationSubnetCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : {
                            "Ref" : "WorkstationSubnetCIDR"
                        }
                    }
                ]
            }
        },
        "NAT1PrivateRoute"                    : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "AZ1PrivateRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT1"
                }
            }
        },
        "NAT2PrivateRoute"                           : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "AZ2PrivateRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT2"
                }
            }
        },
        "NAT1"                                    : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArchNatAMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "NATInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "NATInstanceType"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "NAT1"
                    }
                ],
                "NetworkInterfaces" : [
                    {
                        "GroupSet" : [
                            {
                                "Ref" : "NATSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress" : "true",
                        "DeviceIndex"              : "0",
                        "DeleteOnTermination"      : "true",
                        "SubnetId"                 : {
                            "Ref" : "DMZAZ1Subnet"
                        }
                    }
                ],
                "KeyName"           : {
                    "Ref" : "KeyPairName"
                },
                "SourceDestCheck"   : "false"
            }
        },
        "NAT2"                                    : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "NAT1",
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArchNatAMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "NATInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "NATInstanceType"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "NAT2"
                    }
                ],
                "NetworkInterfaces" : [
                    {
                        "GroupSet" : [
                            {
                                "Ref" : "NATSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress" : "true",
                        "DeviceIndex"              : "0",
                        "DeleteOnTermination"      : "true",
                        "SubnetId"                 : {
                            "Ref" : "DMZAZ2Subnet"
                        }
                    }
                ],
                "KeyName"           : {
                    "Ref" : "KeyPairName"
                },
                "SourceDestCheck"   : "false"
            }
        },
        "RDGWSecurityGroup"                       : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable RDP access from the Internet",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "3389",
                        "ToPort"     : "3389",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "443",
                        "ToPort"     : "443",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "udp",
                        "FromPort"   : "3391",
                        "ToPort"     : "3391",
                        "CidrIp"     : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : "0.0.0.0/0"
                    }
                ]
            }
        },
        "RDGWWaitCondition"                       : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "RDGW1",
            "Properties" : {
                "Handle" : {
                    "Ref" : "RDGWWaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "RDGWWaitHandle"                          : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "RDGW2WaitCondition"                      : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "RDGW2",
            "Properties" : {
                "Handle" : {
                    "Ref" : "RDGW2WaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "RDGW2WaitHandle"                         : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "RDGW1EIP"                                 : {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "vpc",
                "InstanceId" : {
                    "Ref" : "RDGW1"
                }
            }
        },
        "RDGW2EIP"                                : {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "vpc",
                "InstanceId" : {
                    "Ref" : "RDGW2"
                }
            }
        },
        "RDGW1"                               : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainControllerWaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
							"rename",
                            "join",
                            "installRDS",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
							"c:\\chef\\client.rb" : { "content" : { "Ref" : "ChefConfigRbContent" }},
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RDGW1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r RDGW1",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Configure-RDGW.ps1"     : {
                                "source" : "https://s3.amazonaws.com/microsoft_windows/scripts/Configure-RDGW.ps1"
                            },
                            "c:\\chef\\node.json" : {
                                "content" : {
                                    "ActiveDirectory" : {
                                        "name" : "RDGW1",
                                        "DC1PrivateIp" : {
                                            "Ref" : "DC1PrivateIp"
                                        },
                                        "DC2PrivateIp" : {
                                            "Ref" : "DC2PrivateIp"
                                        },
                                        "DomainDNSName" : {
                                            "Ref" : "DomainDNSName"
                                        },
                                        "DomainNetBIOSName" : {
                                            "Ref" : "DomainNetBIOSName"
                                        },
                                        "DomainAdminUser"   : {
                                            "Ref" : "DomainAdminUser"
                                        },
                                        "DomainAdminPassword" : {
                                            "Ref" : "DomainAdminPassword"
                                        }
                                    }
                                }
                            }
                        },
                        "sources" : {
                            "c:\\chef\\" : { "Ref" : "CookbookURL" } 
							
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
						"packages" : {
							"msi" : { "chef" : { "Ref" : "ChefInstallMsiSource" }  }
						}
                    },
                    "join"       : {
                        "commands" : {
                            "AddToDomain" : {
								"command" : { "Ref" : "ChefAddToDomainCommandText" }
                            }
                        }
                    },
                    "rename"      : {
                        "commands" : {
                            "1-Rename" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::Rename]'",
                                "test"    : "cmd /c \"if %COMPUTERNAME%==RDGW1 (EXIT 1) ELSE (EXIT 0)\"" }
                            }
                    },
                    "installRDS" : {
                        "commands" : {
                            "a-install-rds" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
                                        ]
                                    ]
                                }
                            },
                            "b-configure-rdgw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN RDGW1.",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            " -GroupName 'domain admins'"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "finalize"   : {
                        "commands" : {
                            "1-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "RDGWWaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "accessKeyId" : { "Ref" : "S3AccessKeyId" },
                        "secretKey"   : { "Ref" : "S3AccessSecret" } ,
                        "buckets"     : [
                            "gtbb"
                        ]
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "RDGWInstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "DMZAZ1Subnet"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "RDGW1"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "RDGWSecurityGroup"
                    },
                    {
                        "Ref" : "DomainMemberSG"
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r RDGW1",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "RDGW2"                              : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainController2",
            "Metadata"  : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "join",
                            "installRDS",
                            "finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RDGW2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r RDGW2",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Configure-RDGW.ps1"     : {
                                "source" : "https://s3.amazonaws.com/microsoft_windows/scripts/Configure-RDGW.ps1"
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "rename"     : {
                        "commands" : {
                            "1-execute-powershell-script-RenameComputer" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command Rename-Computer -NewName RDGW2 -Restart"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "join"       : {
                        "commands" : {
                            "a-set-dns-servers" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                            {
                                                "Ref" : "DC2PrivateIp"
                                            },
                                            ",",
                                            {
                                                "Ref" : "DC1PrivateIp"
                                            },
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "30"
                            },
                            "b-join-domain"     : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"",
                                            "Add-Computer -DomainName ",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            }
                        }
                    },
                    "installRDS" : {
                        "commands" : {
                            "a-install-rds" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\""
                                        ]
                                    ]
                                }
                            },
                            "b-configure-rdgw" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN RDGW2.",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
                                            " -GroupName 'domain admins'"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "finalize"   : {
                        "commands" : {
                            "1-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "RDGW2WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "RDGWInstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "DMZAZ2Subnet"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "RDGW2"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "RDGWSecurityGroup"
                    },
                    {
                        "Ref" : "DomainMemberSG"
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r RDGW2",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "SqlServer1WaitCondition"                 : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "SQLServer1",
            "Properties" : {
                "Handle" : {
                    "Ref" : "SqlServer1WaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "SqlServer1WaitHandle"                    : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "SqlServerSubnetAZ1"                      : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "SqlServer1SubnetCIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        1,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "SqlServer Subnet (AZ1)"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "SqlServer Subnet (AZ1)"
                    }
                ]
            }
        },
        "SQLServer1RouteTable"                    : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Name",
                        "Value" : "SqlServer1 Route Table"
                    }
                ]
            }
        },
        "SQLServer1Route"                         : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "SQLServer1RouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT1"
                }
            }
        },
        "SQLServer1"                              : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainControllerWaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "accessKeyId" : { "Ref" : "S3AccessKeyId" },
                        "secretKey"   : { "Ref" : "S3AccessSecret" },
                        "buckets"     : [
                            "gtbb"
                        ]
                    }
                },
                "AWS::CloudFormation::Init"           : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "addToDomain",
                            "installSQL",
                            "finalize"
                        ]
                    },
                    "installSQL"  : {
                        "commands" : {
                            "1-Install SQL" : {
								"cwd" : "c:\\chef",
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[SQL2014::express]'",
                                "test"    : "cmd /c \"if exist \"C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\Binn\\sqlservr.exe\" (exit 1) else (exit 0)\""
                            }
                        }
                    },
                    "setup"       : {
                        "files" : {
							"c:\\chef\\client.rb" : { "content" : { "Ref" : "ChefConfigRbContent" }},
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.SQLServer1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r SQLServer1",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\chef\\node.json" : {
                                "content" : {
                                    "ActiveDirectory" : {
                                        "name" : {
                                            "Ref" : "SQL1NetBIOSName"
                                        },
                                        "DC1PrivateIp" : {
                                            "Ref" : "DC1PrivateIp"
                                        },
                                        "DC2PrivateIp" : {
                                            "Ref" : "DC2PrivateIp"
                                        },
                                        "DomainDNSName" : {
                                            "Ref" : "DomainDNSName"
                                        },
                                        "DomainNetBIOSName" : {
                                            "Ref" : "DomainNetBIOSName"
                                        },
                                        "DomainAdminUser"   : {
                                            "Ref" : "DomainAdminUser"
                                        },
                                        "DomainAdminPassword" : {
                                            "Ref" : "DomainAdminPassword"
                                        }
                                    },
									"s3_file" : {
										"key" : { "Ref" : "S3AccessKeyId" },
										"secret" : { "Ref" : "S3AccessSecret" }
									}
                                }
                            }
                        },
                        "sources" : {
                            "c:\\chef\\" : { "Ref" : "CookbookURL" }
							
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
						"packages" : {
							"msi" : {	"chef" : { "Ref" : "ChefInstallMsiSource" }}
						}
                    },
                    "rename"      : {
                        "commands" : {
                            "1-Rename" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::Rename]'",
                                "test"    : {
									"Fn::Join" : [
										"",
										[
											"cmd /c \"if %COMPUTERNAME%==",
                                            {
                                                "Ref" : "SQL1NetBIOSName"
                                            },
											" (EXIT 1) ELSE (EXIT 0)\""
										]
									]
								}
                            }
                        }
                    },
                    "addToDomain" : {
                        "commands" : {
                            "1-AddToDomain" : {
								"command" : { "Ref" : "ChefAddToDomainCommandText" } 
                            }
                        }
                    },
                    "finalize"      : {
                        "commands" : {
                            "a-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "SqlServer1WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
			},
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "SQL1InstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "SqlServerSubnetAZ1"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "SQL1"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "70",
                            "VolumeType" : "gp2"
                        }
                    },
                    {
                        "DeviceName" : "/dev/sdf",
                        "Ebs"        : {
                            "VolumeSize" : "50",
                            "VolumeType" : "gp2"
                        }
                    },
                    {
                        "DeviceName" : "/dev/sdg",
                        "Ebs"        : {
                            "VolumeSize" : "10",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainMemberSG"
                    },
                    {
                        "Ref" : "SqlServer1SG"
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "PrivateIpAddress"    : {
                    "Ref" : "SqlServer1PrivateIp"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r SQLServer1",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "SQLServer1SubnetRouteTableAssociation"   : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "SqlServerSubnetAZ1"
                },
                "RouteTableId" : {
                    "Ref" : "SQLServer1RouteTable"
                }
            }
        },
        "SqlServer1SG"                            : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable SQL Access From The TFS Server",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "1433",
                        "ToPort"     : "1433",
                        "CidrIp"     : {
                            "Ref" : "TFSServer1IpAddressCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "icmp",
                        "FromPort"   : "-1",
                        "ToPort"     : "-1",
                        "CidrIp"     : "0.0.0.0/0"
                    }
                ]
            }
        },
        "TFSServer1WaitCondition"                 : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "TFSServer1",
            "Properties" : {
                "Handle" : {
                    "Ref" : "TFSServer1WaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "TFSServer1WaitHandle"                    : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "TFSServer1SubnetAZ1"                     : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "TFSServer1SubnetCIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        1,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "TFSServer Subnet (AZ1)"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "TFSServer Subnet (AZ1)"
                    }
                ]
            }
        },
        "TFSServer1RouteTable"                    : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Name",
                        "Value" : "TFSServer1 Route Table"
                    }
                ]
            }
        },
        "TFSServer1Route"                         : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "TFSServer1RouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT1"
                }
            }
        },
        "TFSServer1SubnetRouteTableAssociation"   : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "TFSServer1SubnetAZ1"
                },
                "RouteTableId" : {
                    "Ref" : "TFSServer1RouteTable"
                }
            }
        },
        "TFSSecurityGroup"                        : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable TFS type access from approved resources",
                "VpcId"            : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "8080",
                        "ToPort"     : "8080",
                        "CidrIp"     : {
                            "Ref" : "BuildServer1IpAddressCIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "8080",
                        "ToPort"     : "8080",
                        "CidrIp"     : {
                            "Ref" : "WorkstationSubnetCIDR"
                        }
                    }
                ]
            }
        },
        "TFSServer1"                              : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "SqlServer1WaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "accessKeyId" : { "Ref" : "S3AccessKeyId" },
                        "secretKey"   : { "Ref" : "S3AccessSecret" },
                        "buckets"     : [
                            "gtbb"
                        ]
                    }
                },
                "AWS::CloudFormation::Init"           : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "addToDomain",
                            "installTFS",
                            "finalize"
                        ]
                    },
                    "finalize"   : {
                        "commands" : {
                            "a-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "TFSServer1WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "installTFS"  : {
                        "commands" : {
                            "1-TFS" : {
                                "command" : "c:\\opscode\\chefdk\\bin\\chef-client --runlist 'recipe[TFS::applicationtier]'"
                                }
                            }
                    },
                    "setup"       : {
                        "files" : {
							"c:\\chef\\client.rb" : { "content" : { "Ref" : "ChefConfigRbContent" }},
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.TFSServer1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r TFSServer1",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\chef\\node.json" : {
                                "content" : {
                                    "ActiveDirectory" : {
                                        "name" : {
                                            "Ref" : "TFSServer1NetBIOSName"
                                        },
                                        "DC1PrivateIp" : {
                                            "Ref" : "DC1PrivateIp"
                                        },
                                        "DC2PrivateIp" : {
                                            "Ref" : "DC2PrivateIp"
                                        },
                                        "DomainDNSName" : {
                                            "Ref" : "DomainDNSName"
                                        },
                                        "DomainNetBIOSName" : {
                                            "Ref" : "DomainNetBIOSName"
                                        },
                                        "DomainAdminUser"   : {
                                            "Ref" : "DomainAdminUser"
                                        },
                                        "DomainAdminPassword" : {
                                            "Ref" : "DomainAdminPassword"
                                        }
                                    },
									"s3_file" : {
										"key" : { "Ref" : "S3AccessKeyId" },
										"secret" : { "Ref" : "S3AccessSecret" }
									}
                                }
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
						"packages" : {
							"msi" : {	"chef" : { "Ref" : "ChefInstallMsiSource" }}
						},
                        "sources" : {
                            "c:\\chef\\" : { "Ref" : "CookbookURL" },
							"c:\\tools\\pstools\\" : { "Ref" : "PsToolsURL" }
                        }
                    },
                    "rename"      : {
                        "commands" : {
                            "1-Rename" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::Rename]'",
                                "test"    : {
									"Fn::Join" : [
										"",
										[
											"cmd /c \"if %COMPUTERNAME%==",
                                            { "Ref" : "TFSServer1NetBIOSName" },
											" (EXIT 1) ELSE (EXIT 0)\""
										]
									]
								}
                            }
                        }
                    },
                    "addToDomain" : {
                        "commands" : {
                            "1-AddToDomain" : {
								"command" : { "Ref" : "ChefAddToDomainCommandText" } 
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "TFSServer1InstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "TFSServer1SubnetAZ1"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : "TFSServer1"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "200",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainMemberSG"
                    },
                    {
                        "Ref" : "TFSSecurityGroup"
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "PrivateIpAddress"    : {
                    "Ref" : "TFSServer1PrivateIp"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r TFSServer1",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WorkstationSubnetAZ1"                    : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "CidrBlock" : {
                    "Ref" : "WorkstationSubnetCIDR"
                },
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        1,
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags"             : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    },
                    {
                        "Key" : "Role",
                        "Value" : "Workstation Subnet (AZ1)"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "Workstation Subnet (AZ1)"
                    }
                ]
            }
        },
        "WorkstationRouteTable"                  : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags"  : [
                    {
                        "Key" : "Name",
                        "Value" : "Workstation Route Table"
                    }
                ]
            }
        },
        "WorkstationRoute"                       : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "WorkstationRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId"           : {
                    "Ref" : "NAT1"
                }
            }
        },
        "WorkstationSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "WorkstationSubnetAZ1"
                },
                "RouteTableId" : {
                    "Ref" : "WorkstationRouteTable"
                }
            }
        },
        "WORKSTATION36WaitCondition"                 : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "WORKSTATION36",
            "Properties" : {
                "Handle" : {
                    "Ref" : "WORKSTATION36WaitHandle"
                },
                "Timeout" : "10800"
            }
        },
        "WORKSTATION36WaitHandle"                    : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "WORKSTATION36"                           : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "DomainControllerWaitCondition",
            "Metadata"  : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "accessKeyId" : { "Ref" : "S3AccessKeyId" },
                        "secretKey"   : { "Ref" : "S3AccessSecret" },
                        "buckets"     : [
                            "gtbb"
                        ]
                    }
                },
                "AWS::CloudFormation::Init"           : {
                    "configSets" : {
                        "config" : [
                            "setup",
                            "rename",
                            "addToDomain",
                            "SQL",
                            "IIS",
                            "installVS",
                            "Resharper",
							"AWS4VS",
							"finalize"
                        ]
                    },
                    "setup"      : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n",
                                            "interval=1\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.",
                                            {
                                                "Ref" : "WorkstationNetBIOSName"
                                            },
                                            ".Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref" : "AWS::StackId"
                                            },
                                            " -r ",
                                            {
                                                "Ref" : "WorkstationNetBIOSName"
                                            },
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\chef\\node.json" : {
                                "content" : {
                                    "ActiveDirectory" : {
                                        "name" : {
                                            "Ref" : "WorkstationNetBIOSName"
                                        },
                                        "DC1PrivateIp" : {
                                            "Ref" : "DC1PrivateIp"
                                        },
                                        "DC2PrivateIp" : {
                                            "Ref" : "DC2PrivateIp"
                                        },
                                        "DomainDNSName" : {
                                            "Ref" : "DomainDNSName"
                                        },
                                        "DomainNetBIOSName" : {
                                            "Ref" : "DomainNetBIOSName"
                                        },
                                        "DomainAdminUser"   : {
                                            "Ref" : "DomainAdminUser"
                                        },
                                        "DomainAdminPassword" : {
                                            "Ref" : "DomainAdminPassword"
                                        }
                                    },
									"s3_file" : {
										"key" : { "Ref" : "S3AccessKeyId" },
										"secret" : { "Ref" : "S3AccessSecret" }
									}
                                }
                            },
							"c:\\chef\\client.rb" : { "content" : { "Ref" : "ChefConfigRbContent" }}
                        },
                        "sources" : {
                            "c:\\chef\\" : { "Ref" : "CookbookURL" }
							
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
						"packages" : {
							"msi" : {	"awscli" : { "Ref" : "AWSCLIMsiSource" },
										"chef" : { "Ref" : "ChefInstallMsiSource" },
										"chrome" : { "Ref" : "ChromeMsiSource" }
							  }
						}
                    },
                    "rename"      : {
                        "commands" : {
                            "1-Rename" : {
								"cwd" : "c:\\chef\\",
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::Rename]'",
                                "test"    : {
									"Fn::Join" : [
										"",
										[
											"cmd /c \"if %COMPUTERNAME%==",
                                            {
                                                "Ref" : "WorkstationNetBIOSName"
                                            },
											" (EXIT 1) ELSE (EXIT 0)\""
										]
									]
								}
                            }
                        }
                    },
                    "addToDomain" : {
                        "commands" : {
                            "1-AddToDomain" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[ActiveDirectory::AddToDomain]'",
                                "test" : {
									"Fn::Join" : [
										"",
										[
											"cmd /c \"if %USERDOMAIN%==",
                                            {
                                                "Ref" : "DomainNetBIOSName"
                                            },
											" (EXIT 1) ELSE (EXIT 0)\""
										]
									]
								}
                            }
                        }
                    },
                    "SQL"   : {
                        "commands" : {
                            "1-Install SQL" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[SQL2014::express]'",
                                "test"    : "cmd /c \"if exist \"C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\Binn\\sqlservr.exe\" (exit 1) else (exit 0)\""
                            }
                        }
                    },
                    "IIS"   : {
                        "commands" : {
                            "1-Install IIS" : {
								"cwd" : "c:\\chef",
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[iis]'",
                                "test"    : "cmd /c \"if exist C:\\inetpub (exit 1) else (exit 0)\""
                            }
                        }
                    },
                    "Resharper"   : {
                        "commands" : {
                            "1-Install Resharper" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[Resharper]'",
                                "test"    : "cmd /c \"if exist C:\\Program Files (x86)\\JetBrains\\ReSharper (exit 1) else (exit 0)\"",
                                "waitAfterCompletion" : "1"
                            }
                        }
                    },
                    "AWS4VS"   : {
                        "commands" : {
                            "1-Install AWS4VS" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[AWS4VisualStudio]'",
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "installVS"   : {
                        "commands" : {
                            "1-installVS" : {
								"command" : "C:\\opscode\\chefdk\\bin\\chef-client.bat --runlist 'recipe[VisualStudio]'",
                                "test"    : "cmd /c \"if exist \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\devenv.exe\" (exit 1) else (exit 0)\""
                            }
                        }
                    },
                    "finalize"      : {
                        "commands" : {
                            "a-signal-success" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 \"",
                                            {
                                                "Ref" : "WORKSTATION36WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "AD2InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "WorkstationInstanceType"
                },
                "SubnetId"     : {
                    "Ref" : "WorkstationSubnetAZ1"
                },
                "Tags"         : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "WorkstationNetBIOSName"
                        }
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs"        : {
                            "VolumeSize" : "200",
                            "VolumeType" : "gp2"
                        }
                    },
                    {
                        "DeviceName" : "/dev/sdf",
                        "Ebs"        : {
                            "VolumeSize" : "20",
                            "VolumeType" : "gp2"
                        }
                    },
                    {
                        "DeviceName" : "/dev/sdg",
                        "Ebs"        : {
                            "VolumeSize" : "5",
                            "VolumeType" : "gp2"
                        }
                    }
                ],
                "SecurityGroupIds"    : [
                    {
                        "Ref" : "DomainMemberSG"
                    }
                ],
                "KeyName"             : {
                    "Ref" : "KeyPairName"
                },
                "UserData"            : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref" : "AWS::StackId"
                                },
                                " -r ",
                                {
                                    "Ref" : "WorkstationNetBIOSName"
                                },
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "VPC"         : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : {
                    "Ref" : "VPCCIDR"
                },
                "Tags"      : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Ref" : "AWS::StackName"
                        }
                    },
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    }
                ]
            }
        },
        "VPCInternetGateway"           : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    {
                        "Key" : "Network",
                        "Value" : "Public"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "Internet Gateway"
                    }
                ]
            }
        },
        "VPCAttachGateway"             : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "InternetGatewayId" : {
                    "Ref" : "VPCInternetGateway"
                }
            }
        },
		"VPCDHCPOptionsAssociation" : {
            "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "DhcpOptionsId" : {
                    "Ref" : "DhcpOptions"
                }
            }
        }
    },
    "Outputs"                  : {
        "RDGW1ElasticIP" : {
            "Value" : {
                "Ref" : "RDGW1EIP"
            },
            "Description" : "Elastic IP address of the first Remote Desktop Gateway (RDGW1) in AZ1"
        },
        "RootCert1"      : {
            "Value" : "c:\\RDGW1.cer",
            "Description" : "Location of the root SSL certificate on the first Remote Desktop Gateway (RDGW1) in AZ1"
        },
        "RDGW2ElasticIP" : {
            "Value" : {
                "Ref" : "RDGW2EIP"
            },
            "Description" : "Elastic IP address of the second Remote Desktop Gateway (RDGW2) in AZ2"
        },
        "RootCert2"      : {
            "Value" : "c:\\RDGW2.cer",
            "Description" : "Location of the root SSL certificate on the first Remote Desktop Gateway (RDGW2) in AZ2"
        },
        "DomainAdmin"    : {
            "Value" : {
                "Fn::Join" : [
                    "",
                    [
                        {
                            "Ref" : "DomainNetBIOSName"
                        },
                        "\\johnny"
                    ]
                ]
            },
            "Description" : "Domain administrator account"
        },
        "VPC"            : {
            "Value" : {
                "Ref" : "VPC"
            },
            "Description" : "VPC ID"
        },
        "VPCCIDR"        : {
            "Value" : {
                "Ref" : "VPCCIDR"
            },
            "Description" : "VPC CIDR"
        },
        "PublicSubnet1Id" : {
            "Value" : {
                "Ref" : "DMZAZ1Subnet"
            },
            "Description" : "Subnet ID for the public subnet in AZ1"
        },
        "PublicSubnet2Id" : {
            "Value" : {
                "Ref" : "DMZAZ2Subnet"
            },
            "Description" : "Subnet ID for the public in AZ2"
        },
        "AD1SubnetId"     : {
            "Value" : {
                "Ref" : "AZ1Subnet"
            },
            "Description" : "Private Subnet ID in AZ1"
        },
        "AD2SubnetId"     : {
            "Value" : {
                "Ref" : "AZ2Subnet"
            },
            "Description" : "Private Subnet ID in AZ2"
        },
        "DomainMemberSGID" : {
            "Value" : {
                "Ref" : "DomainMemberSG"
            },
            "Description" : "Domain Member Security Group ID"
        }
    }
}