{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "VpcCreatePrimeTest": {
      "Type": "AWS::EC2::VPC",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "VpcCreatePrimeTest"
          }
        ],
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "VpcCreatePrimeTestInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "VpcCreatePrimeTestInternetGateway"
          }
        ]
      }
    },
    "VpcCreatePrimeTestInternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcCreatePrimeTestInternetGateway"
        },
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        }
      }
    },
    "DMZSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMZSubnet"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "CidrBlock": "10.0.32.0/20",
        "AvailabilityZone": "us-east-1a"
      }
    },
    "DMZ2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMZ2Subnet"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "CidrBlock": "10.0.96.0/20",
        "AvailabilityZone": "us-east-1a"
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "CidrBlock": "10.0.0.0/19",
        "AvailabilityZone": "us-east-1a"
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "CidrBlock": "10.0.64.0/19",
        "AvailabilityZone": "us-east-1a"
      }
    },
    "ElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "ElbSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Enables access to the ELB",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 8080,
            "IpProtocol": "Tcp",
            "ToPort": 8080
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "natSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "natSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Enables Ssh access to NAT1 in AZ1 via port 22 and outbound internet access via private subnets",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "Tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "Icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": -1,
            "IpProtocol": "Icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "10.0.64.0/19",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.64.0/19",
            "FromPort": -1,
            "IpProtocol": "Icmp",
            "ToPort": -1
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "TFSUsers": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TFSUsers"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Security Group To Contain Users of the TFS Services",
        "SecurityGroupIngress": [],
        "SecurityGroupEgress": []
      }
    },
    "TFSServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TFSServerSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Allows various TFS communication",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.96.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "TFSUsers"
            },
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "ElbSecurityGroup"
            },
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "WorkstationSecurityGroup"
            },
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080
          },
          {
            "CidrIp": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "build",
                      "PrivateIp"
                    ]
                  },
                  "/32"
                ]
              ]
            },
            "FromPort": 8080,
            "IpProtocol": "Tcp",
            "ToPort": 8080
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "BuildServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "BuildServerSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Allows build controller to build agent communication",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.96.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "SqlServer4TfsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "SqlServer4TfsSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Allows communication to SQLServer Service",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.96.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "WorkstationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "WorkstationSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Security Group To Contain Workstations",
        "SecurityGroupIngress": [],
        "SecurityGroupEgress": []
      }
    },
    "DMZRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMZRouteTable"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        }
      }
    },
    "DMZRoute": {
      "Type": "AWS::EC2::Route",
      "Metadata": {},
      "DependsOn": [
        "VpcCreatePrimeTestInternetGateway"
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "DMZRouteTable"
        },
        "GatewayId": {
          "Ref": "VpcCreatePrimeTestInternetGateway"
        }
      }
    },
    "SubnetRouteTableAssociationDMZSubnet": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "RouteTableId": {
          "Ref": "DMZRouteTable"
        },
        "SubnetId": {
          "Ref": "DMZSubnet"
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRouteTable"
          },
          {
            "Key": "Network",
            "Value": "AZ1 Private"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "InstanceId": {
          "Ref": "NAT1"
        }
      }
    },
    "SubnetRouteTableAssociationPrivateSubnet1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      }
    },
    "PrivateSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      }
    },
    "NAT1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT1"
          }
        ],
        "SecurityGroupIds": [],
        "InstanceType": "t2.micro",
        "ImageId": "ami-4c9e4b24",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeviceIndex": 0,
            "DeleteOnTermination": true,
            "SubnetId": {
              "Ref": "DMZSubnet"
            },
            "GroupSet": [
              {
                "Ref": "natSecurityGroup"
              }
            ]
          }
        ],
        "KeyName": "corp.getthebuybox.com",
        "UserData": {
          "Fn::Base64": ""
        },
        "SourceDestCheck": false
      }
    },
    "dc1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "installADDS",
              "configureSites"
            ],
            "InstallChefConfigSet": [
              "InstallChefConfigSet"
            ],
            "finalizeConfigSet": [
              "finalizeConfig"
            ]
          },
          "setup": {
            "commands": {
              "a-set-static-ip": {
                "waitAfterCompletion": "15",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                      " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1"
              },
              "a-disable-win-fw": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                      " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1"
              }
            },
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\nstack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\nregion=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\ninterval=1\nverbose=true"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.dc1.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c ",
                      "config,InstallChefConfigSet,finalizeConfigSet",
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "dc1",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$netip = Get-NetIPConfiguration;",
                      "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                      "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                      "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                      "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1": {
                "content": {},
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/activedirectory/latest/scripts/ConvertTo-EnterpriseAdmin.ps1"
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "rename": {
            "commands": {
              "1-execute-powershell-script-RenameComputer": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "\"Rename-Computer -NewName ",
                      "dc1",
                      " -Restart\"",
                      " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "installADDS": {
            "commands": {
              "1-install-prereqsz": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\"",
                      " > \"c:\\cfn\\log\\1-install-prereqsz.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\1-install-prereqsz.log\" EXIT 1"
              },
              "2-install-adds": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Install-ADDSForest -DomainName ",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -SafeModeAdministratorPassword (convertto-securestring jhkjhsdf338! -asplaintext -force) -DomainMode Win2012 -DomainNetbiosName ",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      " -ForestMode Win2012 -Confirm:$false -Force\"",
                      " > \"c:\\cfn\\log\\2-install-adds.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\2-install-adds.log\" EXIT 1"
              },
              "3-restart-service": {
                "waitAfterCompletion": "20",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Restart-Service NetLogon -EA 0\"",
                      " > \"c:\\cfn\\log\\3-restart-service.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\3-restart-service.log\" EXIT 1"
              },
              "4 - create - adminuser": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"",
                      "New-ADUser ",
                      "-Name ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      " -UserPrincipalName ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "@",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " ",
                      "-AccountPassword (ConvertTo-SecureString ",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      " -AsPlainText -Force) ",
                      "-Enabled $true ",
                      "-PasswordNeverExpires $true\"",
                      " > \"c:\\cfn\\log\\4 - create - adminuser.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\4 - create - adminuser.log\" EXIT 1"
              },
              "5 - update - adminuser": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\5 - update - adminuser.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\5 - update - adminuser.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "configureSites": {
            "commands": {
              "a-rename-default-site": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      " ",
                      "\"",
                      "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName DMZSubnet",
                      "\"",
                      " > \"c:\\cfn\\log\\a-rename-default-site.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-rename-default-site.log\" EXIT 1"
              },
              "b-create-site-2": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "\"",
                      "New-ADReplicationSite DMZ2Subnet",
                      "\"",
                      " > \"c:\\cfn\\log\\b-create-site-2.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\b-create-site-2.log\" EXIT 1"
              },
              "m-set-site-link": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"",
                      "Get-ADReplicationSiteLink -Filter * | Set-ADReplicationSiteLink -SitesIncluded @{add='DMZ2Subnet'} -ReplicationFrequencyInMinutes 15\"",
                      " > \"c:\\cfn\\log\\m-set-site-link.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\m-set-site-link.log\" EXIT 1"
              },
              "create-subnet-DMZSubnet": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command New-ADReplicationSubnet -Name ",
                      "10.0.32.0/20",
                      " -Site ",
                      "DMZSubnet",
                      " > \"c:\\cfn\\log\\create-subnet-DMZSubnet.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\create-subnet-DMZSubnet.log\" EXIT 1"
              },
              "create-subnet-DMZ2Subnet": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command New-ADReplicationSubnet -Name ",
                      "10.0.96.0/20",
                      " -Site ",
                      "DMZ2Subnet",
                      " > \"c:\\cfn\\log\\create-subnet-DMZ2Subnet.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\create-subnet-DMZ2Subnet.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "InstallChefConfigSet": {
            "commands": {},
            "files": {
              "c:/chef/node.json": {
                "content": {
                  "nothing": "nothing",
                  "domain": "prime"
                }
              }
            },
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "finalizeConfig": {
            "commands": {
              "a-signal-success": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "dc1WaitConditionHandle"
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-signal-success.log\""
                    ]
                  ]
                }
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          }
        }
      },
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "dc1"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "DomainControllerSG1"
          }
        ],
        "InstanceType": "t2.micro",
        "ImageId": "ami-e4034a8e",
        "NetworkInterfaces": [],
        "KeyName": "corp.getthebuybox.com",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>cfn-init.exe -v -c ",
                "config,InstallChefConfigSet,finalizeConfigSet",
                " -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r dc1 --region ",
                {
                  "Ref": "AWS::Region"
                },
                "</script>"
              ]
            ]
          }
        },
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      }
    },
    "DomainMemberSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DomainMemberSG"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Domain Member Security Group",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 53,
            "IpProtocol": "Tcp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 53,
            "IpProtocol": "Udp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 49152,
            "IpProtocol": "Tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 49152,
            "IpProtocol": "Udp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.32.0/20",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 53,
            "IpProtocol": "Tcp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 53,
            "IpProtocol": "Udp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 49152,
            "IpProtocol": "Tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 49152,
            "IpProtocol": "Udp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 53,
            "IpProtocol": "Tcp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 53,
            "IpProtocol": "Udp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 49152,
            "IpProtocol": "Tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 49152,
            "IpProtocol": "Udp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 53,
            "IpProtocol": "Tcp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 53,
            "IpProtocol": "Udp",
            "ToPort": 53
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 49152,
            "IpProtocol": "Tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 49152,
            "IpProtocol": "Udp",
            "ToPort": 65535
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "10.0.0.0/19",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "DomainControllerSG1": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DomainControllerSG1"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Domain Controller",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": 5985,
            "IpProtocol": "Tcp",
            "ToPort": 5985
          },
          {
            "CidrIp": "10.0.0.0/16",
            "FromPort": 80,
            "IpProtocol": "Tcp",
            "ToPort": 80
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 123,
            "IpProtocol": "udp",
            "ToPort": 123
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 135,
            "IpProtocol": "tcp",
            "ToPort": 135
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 9389,
            "IpProtocol": "tcp",
            "ToPort": 9389
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 138,
            "IpProtocol": "udp",
            "ToPort": 138
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 445,
            "IpProtocol": "tcp",
            "ToPort": 445
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 445,
            "IpProtocol": "udp",
            "ToPort": 445
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 464,
            "IpProtocol": "tcp",
            "ToPort": 464
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 464,
            "IpProtocol": "udp",
            "ToPort": 464
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 49152,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 49152,
            "IpProtocol": "udp",
            "ToPort": 65535
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 389,
            "IpProtocol": "tcp",
            "ToPort": 389
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 389,
            "IpProtocol": "udp",
            "ToPort": 389
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 636,
            "IpProtocol": "tcp",
            "ToPort": 636
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 3268,
            "IpProtocol": "tcp",
            "ToPort": 3269
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 53,
            "IpProtocol": "tcp",
            "ToPort": 53
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 53,
            "IpProtocol": "udp",
            "ToPort": 53
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 88,
            "IpProtocol": "tcp",
            "ToPort": 88
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 88,
            "IpProtocol": "udp",
            "ToPort": 88
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 3389,
            "IpProtocol": "tcp",
            "ToPort": 3389
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "DomainMemberSG"
            },
            "FromPort": 3389,
            "IpProtocol": "udp",
            "ToPort": 3389
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "RDGateway": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "join",
              "installRDS"
            ],
            "InstallChefConfigSet": [
              "InstallChefConfigSet"
            ],
            "finalizeConfigSet": [
              "finalizeConfig"
            ]
          },
          "setup": {
            "commands": {
              "a-set-static-ip": {
                "waitAfterCompletion": "15",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                      " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1"
              },
              "a-disable-win-fw": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                      " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1"
              }
            },
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\nstack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\nregion=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\ninterval=1\nverbose=true"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.RDGateway.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c ",
                      "config,InstallChefConfigSet,finalizeConfigSet",
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "RDGateway",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$netip = Get-NetIPConfiguration;",
                      "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                      "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                      "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                      "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "rename": {
            "commands": {
              "1-execute-powershell-script-RenameComputer": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "\"Rename-Computer -NewName ",
                      "RDGateway",
                      " -Restart\"",
                      " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "join": {
            "commands": {
              "b-join-domain": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"",
                      " Add-Computer -DomainName ",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -Credential ",
                      "(New-Object System.Management.Automation.PSCredential('",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      "\\",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "',",
                      "(ConvertTo-SecureString ",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      " -AsPlainText -Force))) ",
                      "-Restart\"",
                      " > \"c:\\cfn\\log\\b-join-domain.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1"
              },
              "a-set-dns-servers": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                      {
                        "Fn::GetAtt": [
                          "dc1",
                          "PrivateIp"
                        ]
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "installRDS": {
            "commands": {
              "a-install-rds": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\"",
                      " > \"c:\\cfn\\log\\a-install-rds.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-install-rds.log\" EXIT 1"
              },
              "b-configure-rdgw": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned",
                      " C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN RDGateway.",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -DomainNetBiosName ",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      " -GroupName 'domain admins'",
                      " > \"c:\\cfn\\log\\b-configure-rdgw.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\b-configure-rdgw.log\" EXIT 1"
              }
            },
            "files": {
              "c:\\cfn\\scripts\\Configure-RDGW.ps1": {
                "content": {},
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/activedirectory/latest/scripts/Configure-RDGW.ps1"
              }
            },
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "InstallChefConfigSet": {
            "commands": {},
            "files": {
              "c:/chef/node.json": {
                "content": {
                  "nothing": "nothing",
                  "domain": "prime"
                }
              }
            },
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "finalizeConfig": {
            "commands": {
              "a-signal-success": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "RDGatewayWaitConditionHandle"
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-signal-success.log\""
                    ]
                  ]
                }
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          }
        }
      },
      "DependsOn": [
        "dc1WaitCondition"
      ],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "RDGateway"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "RDGWSecurityGroup"
          },
          {
            "Ref": "DomainMemberSG"
          }
        ],
        "InstanceType": "t2.micro",
        "ImageId": "ami-e4034a8e",
        "NetworkInterfaces": [],
        "KeyName": "corp.getthebuybox.com",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>cfn-init.exe -v -c ",
                "config,InstallChefConfigSet,finalizeConfigSet",
                " -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r RDGateway --region ",
                {
                  "Ref": "AWS::Region"
                },
                "</script>"
              ]
            ]
          }
        },
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "DMZSubnet"
        }
      }
    },
    "RDGWSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "RDGWSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Remote Desktop Security Group",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 3389,
            "IpProtocol": "Tcp",
            "ToPort": 3389
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "Tcp",
            "ToPort": 443
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 3391,
            "IpProtocol": "Udp",
            "ToPort": 3391
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "Icmp",
            "ToPort": -1
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "RDGatewayEIP": {
      "Type": "AWS::EC2::EIP",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "InstanceId": {
          "Ref": "RDGateway"
        },
        "Domain": "vpc"
      }
    },
    "RDGatewayWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Timeout": 7200,
        "Handle": {
          "Ref": "RDGatewayWaitConditionHandle"
        }
      }
    },
    "RDGatewayWaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {}
    },
    "dc1WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Timeout": 10800,
        "Handle": {
          "Ref": "dc1WaitConditionHandle"
        }
      }
    },
    "dc1WaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {}
    },
    "RDGatewayRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "TTL": "60",
        "Type": "A",
        "ResourceRecords": [
          {
            "Ref": "RDGatewayEIP"
          }
        ],
        "HostedZoneName": "getthebuybox.com.",
        "Name": "rdp52.prime.getthebuybox.com."
      }
    },
    "sql1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "join"
            ],
            "InstallChefConfigSet": [
              "InstallChefConfigSet"
            ],
            "sqlserver.tar.gz": [
              "sqlserver.tar.gz"
            ],
            "finalizeConfigSet": [
              "finalizeConfig"
            ]
          },
          "setup": {
            "commands": {
              "a-set-static-ip": {
                "waitAfterCompletion": "15",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                      " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1"
              },
              "a-disable-win-fw": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                      " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1"
              }
            },
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\nstack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\nregion=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\ninterval=1\nverbose=true"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.sql1.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c ",
                      "config,InstallChefConfigSet,sqlserver.tar.gz,finalizeConfigSet",
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "sql1",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$netip = Get-NetIPConfiguration;",
                      "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                      "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                      "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                      "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "rename": {
            "commands": {
              "1-execute-powershell-script-RenameComputer": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "\"Rename-Computer -NewName ",
                      "sql1",
                      " -Restart\"",
                      " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "join": {
            "commands": {
              "b-join-domain": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"",
                      " Add-Computer -DomainName ",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -Credential ",
                      "(New-Object System.Management.Automation.PSCredential('",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      "\\",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "',",
                      "(ConvertTo-SecureString ",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      " -AsPlainText -Force))) ",
                      "-Restart\"",
                      " > \"c:\\cfn\\log\\b-join-domain.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1"
              },
              "a-set-dns-servers": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                      {
                        "Fn::GetAtt": [
                          "dc1",
                          "PrivateIp"
                        ]
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "InstallChefConfigSet": {
            "commands": {},
            "files": {
              "c:/chef/node.json": {
                "content": {
                  "nothing": "nothing",
                  "domain": "prime",
                  "sqlserver": {
                    "SQLUSERDBDIR": "d:\\SqlUserDb",
                    "SQLUSERDBLOGDIR": "e:\\SqlUserDbLog",
                    "INSTALLSQLDATADIR": "f:\\SqlData"
                  },
                  "s3_file": {
                    "key": "AKIAJMUQ7GPWQNKSODIA",
                    "secret": "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"
                  }
                }
              }
            },
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "sqlserver.tar.gz": {
            "commands": {
              "sqlserver--default": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "C:/opscode/chef/bin/chef-client.bat -z -o sqlserver::default -c c:/chef/sqlserver.tar.gz/client.rb"
                    ]
                  ]
                }
              }
            },
            "files": {
              "c:/chef/sqlserver.tar.gz/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cache_path 'c:/chef'\ncookbook_path 'c:/chef/sqlserver.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                    ]
                  ]
                }
              }
            },
            "services": {},
            "sources": {
              "c:/chef/sqlserver.tar.gz/": "https://gtbb.s3.amazonaws.com/sqlserver.tar.gz"
            },
            "packages": {
              "msi": {
                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
              }
            },
            "ignoreErrors": true
          },
          "finalizeConfig": {
            "commands": {
              "a-signal-success": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "sql1WaitConditionHandle"
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-signal-success.log\""
                    ]
                  ]
                }
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "accessKeyId": "AKIAJMUQ7GPWQNKSODIA",
            "secretKey": "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",
            "buckets": [
              "gtbb"
            ],
            "type": "S3"
          }
        }
      },
      "DependsOn": [
        "dc1WaitCondition"
      ],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "sql1"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "DomainMemberSG"
          },
          {
            "Ref": "SqlServer4TfsSecurityGroup"
          },
          {
            "Ref": "SqlAccess"
          }
        ],
        "InstanceType": "t2.micro",
        "ImageId": "ami-e4034a8e",
        "NetworkInterfaces": [],
        "KeyName": "corp.getthebuybox.com",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>cfn-init.exe -v -c ",
                "config,InstallChefConfigSet,sqlserver.tar.gz,finalizeConfigSet",
                " -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r sql1 --region ",
                {
                  "Ref": "AWS::Region"
                },
                "</script>"
              ]
            ]
          }
        },
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "BlockDeviceMappings": [
          {
            "Ebs": {
              "VolumeSize": 20,
              "VolumeType": "gp2"
            },
            "DeviceName": "xvdf"
          },
          {
            "Ebs": {
              "VolumeSize": 10,
              "VolumeType": "gp2"
            },
            "DeviceName": "xvdg"
          },
          {
            "Ebs": {
              "VolumeSize": 10,
              "VolumeType": "gp2"
            },
            "DeviceName": "xvdh"
          },
          {
            "Ebs": {
              "SnapshotId": "snap-2cf80f29"
            },
            "DeviceName": "xvdi"
          }
        ]
      }
    },
    "tfsserver1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "join"
            ],
            "InstallChefConfigSet": [
              "InstallChefConfigSet"
            ],
            "tfs.tar.gz": [
              "tfs.tar.gz"
            ],
            "finalizeConfigSet": [
              "finalizeConfig"
            ]
          },
          "setup": {
            "commands": {
              "a-set-static-ip": {
                "waitAfterCompletion": "15",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                      " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1"
              },
              "a-disable-win-fw": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                      " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1"
              }
            },
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\nstack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\nregion=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\ninterval=1\nverbose=true"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.tfsserver1.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c ",
                      "config,InstallChefConfigSet,tfs.tar.gz,finalizeConfigSet",
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "tfsserver1",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$netip = Get-NetIPConfiguration;",
                      "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                      "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                      "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                      "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "rename": {
            "commands": {
              "1-execute-powershell-script-RenameComputer": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "\"Rename-Computer -NewName ",
                      "tfsserver1",
                      " -Restart\"",
                      " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "join": {
            "commands": {
              "b-join-domain": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"",
                      " Add-Computer -DomainName ",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -Credential ",
                      "(New-Object System.Management.Automation.PSCredential('",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      "\\",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "',",
                      "(ConvertTo-SecureString ",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      " -AsPlainText -Force))) ",
                      "-Restart\"",
                      " > \"c:\\cfn\\log\\b-join-domain.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1"
              },
              "a-set-dns-servers": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                      {
                        "Fn::GetAtt": [
                          "dc1",
                          "PrivateIp"
                        ]
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "InstallChefConfigSet": {
            "commands": {},
            "files": {
              "c:/chef/node.json": {
                "content": {
                  "nothing": "nothing",
                  "domainAdmin": {
                    "name": "prime\\johnny",
                    "password": "kasdfiajs!!9"
                  },
                  "s3_file": {
                    "key": "AKIAJMUQ7GPWQNKSODIA",
                    "secret": "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"
                  },
                  "domain": "prime"
                }
              }
            },
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "tfs.tar.gz": {
            "commands": {
              "tfs--applicationtier": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "C:/opscode/chef/bin/chef-client.bat -z -o tfs::applicationtier -c c:/chef/tfs.tar.gz/client.rb"
                    ]
                  ]
                }
              }
            },
            "files": {
              "c:/chef/tfs.tar.gz/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cache_path 'c:/chef'\ncookbook_path 'c:/chef/tfs.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                    ]
                  ]
                }
              }
            },
            "services": {},
            "sources": {
              "c:/chef/tfs.tar.gz/": "https://gtbb.s3.amazonaws.com/tfs.tar.gz"
            },
            "packages": {
              "msi": {
                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
              }
            },
            "ignoreErrors": true
          },
          "finalizeConfig": {
            "commands": {
              "a-signal-success": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "tfsserver1WaitConditionHandle"
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-signal-success.log\""
                    ]
                  ]
                }
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "accessKeyId": "AKIAJMUQ7GPWQNKSODIA",
            "secretKey": "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",
            "buckets": [
              "gtbb"
            ],
            "type": "S3"
          }
        }
      },
      "DependsOn": [
        "sql1WaitCondition",
        "dc1WaitCondition"
      ],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "tfsserver1"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "TFSServerSecurityGroup"
          },
          {
            "Ref": "DomainMemberSG"
          }
        ],
        "InstanceType": "t2.small",
        "ImageId": "ami-e4034a8e",
        "NetworkInterfaces": [],
        "KeyName": "corp.getthebuybox.com",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>cfn-init.exe -v -c ",
                "config,InstallChefConfigSet,tfs.tar.gz,finalizeConfigSet",
                " -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r tfsserver1 --region ",
                {
                  "Ref": "AWS::Region"
                },
                "</script>"
              ]
            ]
          }
        },
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "214",
              "VolumeType": "gp2"
            }
          },
          {
            "Ebs": {
              "SnapshotId": "snap-4e69d94b"
            },
            "DeviceName": "xvdf"
          }
        ]
      }
    },
    "sql1WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Timeout": 43200,
        "Handle": {
          "Ref": "sql1WaitConditionHandle"
        }
      }
    },
    "sql1WaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {}
    },
    "SqlAccess": {
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "SqlAccess"
          }
        ],
        "VpcId": {
          "Ref": "VpcCreatePrimeTest"
        },
        "GroupDescription": "Sql Access For Tfs server",
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "tfsserver1",
                      "PrivateIp"
                    ]
                  },
                  "/32"
                ]
              ]
            },
            "FromPort": 1433,
            "IpProtocol": "Tcp",
            "ToPort": 1433
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "build": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "join"
            ],
            "InstallChefConfigSet": [
              "InstallChefConfigSet"
            ],
            "vs.tar.gz": [
              "vs.tar.gz"
            ],
            "tfs.tar.gz": [
              "tfs.tar.gz"
            ],
            "finalizeConfigSet": [
              "finalizeConfig"
            ]
          },
          "setup": {
            "commands": {
              "a-set-static-ip": {
                "waitAfterCompletion": "15",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                      " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1"
              },
              "a-disable-win-fw": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                      " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1"
              }
            },
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\nstack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\nregion=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\ninterval=1\nverbose=true"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.build.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c ",
                      "config,InstallChefConfigSet,vs.tar.gz,tfs.tar.gz,finalizeConfigSet",
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "build",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$netip = Get-NetIPConfiguration;",
                      "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                      "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                      "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                      "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "rename": {
            "commands": {
              "1-execute-powershell-script-RenameComputer": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "\"Rename-Computer -NewName ",
                      "build",
                      " -Restart\"",
                      " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "join": {
            "commands": {
              "b-join-domain": {
                "waitAfterCompletion": "forever",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"",
                      " Add-Computer -DomainName ",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " -Credential ",
                      "(New-Object System.Management.Automation.PSCredential('",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      "\\",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "',",
                      "(ConvertTo-SecureString ",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      " -AsPlainText -Force))) ",
                      "-Restart\"",
                      " > \"c:\\cfn\\log\\b-join-domain.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1"
              },
              "a-set-dns-servers": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe ",
                      "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                      {
                        "Fn::GetAtt": [
                          "dc1",
                          "PrivateIp"
                        ]
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                    ]
                  ]
                },
                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1"
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "InstallChefConfigSet": {
            "commands": {},
            "files": {
              "c:/chef/node.json": {
                "content": {
                  "nothing": "nothing",
                  "s3_file": {
                    "key": "AKIAJMUQ7GPWQNKSODIA",
                    "secret": "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"
                  },
                  "domainAdmin": {
                    "name": "prime\\johnny",
                    "password": "kasdfiajs!!9"
                  },
                  "domain": "prime"
                }
              }
            },
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          },
          "vs.tar.gz": {
            "commands": {
              "vs--default": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "C:/opscode/chef/bin/chef-client.bat -z -o vs::default -c c:/chef/vs.tar.gz/client.rb"
                    ]
                  ]
                }
              }
            },
            "files": {
              "c:/chef/vs.tar.gz/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cache_path 'c:/chef'\ncookbook_path 'c:/chef/vs.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                    ]
                  ]
                }
              }
            },
            "services": {},
            "sources": {
              "c:/chef/vs.tar.gz/": "https://gtbb.s3.amazonaws.com/vs.tar.gz"
            },
            "packages": {
              "msi": {
                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
              }
            },
            "ignoreErrors": true
          },
          "tfs.tar.gz": {
            "commands": {
              "tfs--build": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "C:/opscode/chef/bin/chef-client.bat -z -o tfs::build -c c:/chef/tfs.tar.gz/client.rb"
                    ]
                  ]
                }
              }
            },
            "files": {
              "c:/chef/tfs.tar.gz/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cache_path 'c:/chef'\ncookbook_path 'c:/chef/tfs.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                    ]
                  ]
                }
              }
            },
            "services": {},
            "sources": {
              "c:/chef/tfs.tar.gz/": "https://gtbb.s3.amazonaws.com/tfs.tar.gz"
            },
            "packages": {
              "msi": {
                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
              }
            },
            "ignoreErrors": true
          },
          "finalizeConfig": {
            "commands": {
              "a-signal-success": {
                "waitAfterCompletion": "0",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "buildWaitConditionHandle"
                      },
                      "\"",
                      " > \"c:\\cfn\\log\\a-signal-success.log\""
                    ]
                  ]
                }
              }
            },
            "files": {},
            "services": {},
            "sources": {},
            "packages": {},
            "ignoreErrors": true
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "accessKeyId": "AKIAJMUQ7GPWQNKSODIA",
            "secretKey": "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",
            "buckets": [
              "gtbb"
            ],
            "type": "S3"
          }
        }
      },
      "DependsOn": [
        "tfsserver1WaitCondition",
        "dc1WaitCondition"
      ],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "build"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "BuildServerSecurityGroup"
          },
          {
            "Ref": "DomainMemberSG"
          }
        ],
        "InstanceType": "t2.small",
        "ImageId": "ami-e4034a8e",
        "NetworkInterfaces": [],
        "KeyName": "corp.getthebuybox.com",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>cfn-init.exe -v -c ",
                "config,InstallChefConfigSet,vs.tar.gz,tfs.tar.gz,finalizeConfigSet",
                " -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r build --region ",
                {
                  "Ref": "AWS::Region"
                },
                "</script>"
              ]
            ]
          }
        },
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "30",
              "VolumeType": "gp2"
            }
          },
          {
            "Ebs": {
              "SnapshotId": "snap-5e27a85a"
            },
            "DeviceName": "xvdf"
          },
          {
            "Ebs": {
              "SnapshotId": "snap-4e69d94b"
            },
            "DeviceName": "xvdg"
          }
        ]
      }
    },
    "tfsserver1WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Timeout": 10800,
        "Handle": {
          "Ref": "tfsserver1WaitConditionHandle"
        }
      }
    },
    "tfsserver1WaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {}
    },
    "buildWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {
        "Timeout": 10800,
        "Handle": {
          "Ref": "buildWaitConditionHandle"
        }
      }
    },
    "buildWaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {},
      "DependsOn": [],
      "Properties": {}
    }
  },
  "Parameters": {
    "DefaultKeyPairKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "corp.getthebuybox.com"
    },
    "DomainDNSName": {
      "Type": "String",
      "Default": "prime.getthebuybox.com"
    },
    "DomainAdminPassword": {
      "Type": "String",
      "Default": "kasdfiajs!!9"
    },
    "DomainNetBIOSName": {
      "Type": "String",
      "Default": "prime"
    },
    "DomainAdminUser": {
      "Type": "String",
      "Default": "johnny"
    }
  }
}