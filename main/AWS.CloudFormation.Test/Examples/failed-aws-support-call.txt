{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "DefaultKeyPairKeyName": {
            "Default": "corp.getthebuybox.com",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "DomainAdminPassword": {
            "Default": "kasdfiajs!!9",
            "Type": "String"
        },
        "DomainAdminUser": {
            "Default": "johnny",
            "Type": "String"
        },
        "DomainDNSName": {
            "Default": "prime.getthebuybox.com",
            "Type": "String"
        },
        "DomainNetBIOSName": {
            "Default": "prime",
            "Type": "String"
        }
    },
    "Resources": {
        "BuildServerSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Allows build controller to build agent communication",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.96.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "BuildServerSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DMZ2Subnet": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.96.0/20",
                "Tags": [{
                    "Key": "Name",
                    "Value": "DMZ2Subnet"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "DMZRoute": {
            "DependsOn": [
                "VpcCreatePrimeTestInternetGateway"
            ],
            "Metadata": {},
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VpcCreatePrimeTestInternetGateway"
                },
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "DMZRouteTable": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": "DMZRouteTable"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "DMZSubnet": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.32.0/20",
                "Tags": [{
                    "Key": "Name",
                    "Value": "DMZSubnet"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "DomainControllerSG1": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Domain Controller",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "10.0.0.0/16",
                    "FromPort": 5985,
                    "IpProtocol": "Tcp",
                    "ToPort": 5985
                }, {
                    "CidrIp": "10.0.0.0/16",
                    "FromPort": 80,
                    "IpProtocol": "Tcp",
                    "ToPort": 80
                }, {
                    "FromPort": 123,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 123
                }, {
                    "FromPort": 135,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 135
                }, {
                    "FromPort": 9389,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 9389
                }, {
                    "FromPort": 138,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 138
                }, {
                    "FromPort": 445,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 445
                }, {
                    "FromPort": 445,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 445
                }, {
                    "FromPort": 464,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 464
                }, {
                    "FromPort": 464,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 464
                }, {
                    "FromPort": 49152,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 65535
                }, {
                    "FromPort": 49152,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 65535
                }, {
                    "FromPort": 389,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 389
                }, {
                    "FromPort": 389,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 389
                }, {
                    "FromPort": 636,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 636
                }, {
                    "FromPort": 3268,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 3269
                }, {
                    "FromPort": 53,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 53
                }, {
                    "FromPort": 53,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 53
                }, {
                    "FromPort": 88,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 88
                }, {
                    "FromPort": 88,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 88
                }, {
                    "FromPort": 3389,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 3389
                }, {
                    "FromPort": 3389,
                    "IpProtocol": "udp",
                    "SourceSecurityGroupId": {
                        "Ref": "DomainMemberSG"
                    },
                    "ToPort": 3389
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "DomainControllerSG1"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DomainMemberSG": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Domain Member Security Group",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 53,
                    "IpProtocol": "Tcp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 53,
                    "IpProtocol": "Udp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 49152,
                    "IpProtocol": "Tcp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 49152,
                    "IpProtocol": "Udp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 53,
                    "IpProtocol": "Tcp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 53,
                    "IpProtocol": "Udp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 49152,
                    "IpProtocol": "Tcp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 49152,
                    "IpProtocol": "Udp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 53,
                    "IpProtocol": "Tcp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 53,
                    "IpProtocol": "Udp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 49152,
                    "IpProtocol": "Tcp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 49152,
                    "IpProtocol": "Udp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 53,
                    "IpProtocol": "Tcp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 53,
                    "IpProtocol": "Udp",
                    "ToPort": 53
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 49152,
                    "IpProtocol": "Tcp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 49152,
                    "IpProtocol": "Udp",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "DomainMemberSG"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ElbSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Enables access to the ELB",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 8080,
                    "IpProtocol": "Tcp",
                    "ToPort": 8080
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "ElbSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "NAT1": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "ImageId": "ami-4c9e4b24",
                "InstanceType": "t2.micro",
                "KeyName": "corp.getthebuybox.com",
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": true,
                    "DeleteOnTermination": true,
                    "DeviceIndex": 0,
                    "GroupSet": [{
                        "Ref": "natSecurityGroup"
                    }],
                    "SubnetId": {
                        "Ref": "DMZSubnet"
                    }
                }],
                "SecurityGroupIds": [],
                "SourceDestCheck": false,
                "Tags": [{
                    "Key": "Name",
                    "Value": "NAT1"
                }],
                "UserData": {
                    "Fn::Base64": ""
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "PrivateRoute": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NAT1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRouteTable": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": "PrivateRouteTable"
                }, {
                    "Key": "Network",
                    "Value": "AZ1 Private"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateSubnet1": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.0.0/19",
                "Tags": [{
                    "Key": "Name",
                    "Value": "PrivateSubnet1"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnet2": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.64.0/19",
                "Tags": [{
                    "Key": "Name",
                    "Value": "PrivateSubnet2"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnetRouteTableAssociation1": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "RDGWSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Remote Desktop Security Group",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 443,
                    "IpProtocol": "Tcp",
                    "ToPort": 443
                }, {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 3391,
                    "IpProtocol": "Udp",
                    "ToPort": 3391
                }, {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": -1,
                    "IpProtocol": "Icmp",
                    "ToPort": -1
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "RDGWSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "RDGateway": {
            "DependsOn": "dc1",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "InstallChefConfigSet": {
                        "commands": {},
                        "files": {
                            "c:/chef/node.json": {
                                "content": {
                                    "domain": "prime",
                                    "nothing": "nothing"
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "configSets": {
                        "InstallChefConfigSet": [
                            "InstallChefConfigSet"
                        ],
                        "config": [
                            "setup",
                            "rename",
                            "join",
                            "installRDS"
                        ],
                        "finalizeConfigSet": [
                            "finalizeConfig"
                        ]
                    },
                    "finalizeConfig": {
                        "commands": {
                            "a-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "cfn-signal.exe -e 0 \"", {
                                                "Fn::Base64": {
                                                    "Ref": "RDGatewayWaitConditionHandle"
                                                }
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-signal-success.log\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "installRDS": {
                        "commands": {
                            "a-install-rds": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway\"",
                                            " > \"c:\\cfn\\log\\a-install-rds.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-install-rds.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "b-configure-rdgw": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned",
                                            " C:\\cfn\\scripts\\Configure-RDGW.ps1 -ServerFQDN RDGateway.", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ", {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            " -GroupName 'domain admins'",
                                            " > \"c:\\cfn\\log\\b-configure-rdgw.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\b-configure-rdgw.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\cfn\\scripts\\Configure-RDGW.ps1": {
                                "content": {},
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/activedirectory/latest/scripts/Configure-RDGW.ps1"
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "join": {
                        "commands": {
                            "a-set-dns-servers": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
                                                "Fn::GetAtt": [
                                                    "dc1",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"",
                                            " Add-Computer -DomainName ", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('", {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            "\\", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ", {
                                                "Ref": "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\"",
                                            " > \"c:\\cfn\\log\\b-join-domain.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "rename": {
                        "commands": {
                            "1-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "\"Rename-Computer -NewName ",
                                            "RDGateway",
                                            " -Restart\"",
                                            " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "setup": {
                        "commands": {
                            "a-disable-win-fw": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                                            " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                                            " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1",
                                "waitAfterCompletion": "15"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[main]\nstack=", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\nregion=", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\ninterval=1\nverbose=true"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RDGateway.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c ",
                                            "config,InstallChefConfigSet,finalizeConfigSet",
                                            " -s ", {
                                                "Ref": "AWS::StackName"
                                            },
                                            " -r ",
                                            "RDGateway",
                                            " --region ", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "sources": {}
                    }
                }
            },
            "Properties": {
                "ImageId": "ami-e4034a8e",
                "InstanceType": "t2.micro",
                "KeyName": "corp.getthebuybox.com",
                "NetworkInterfaces": [],
                "SecurityGroupIds": [{
                    "Ref": "RDGWSecurityGroup"
                }, {
                    "Ref": "DomainMemberSG"
                }],
                "SourceDestCheck": true,
                "SubnetId": {
                    "Ref": "DMZSubnet"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "RDGateway"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "<script>cfn-init.exe -v -c ",
                                "config,InstallChefConfigSet,finalizeConfigSet",
                                " -s ", {
                                    "Ref": "AWS::StackId"
                                },
                                " -r RDGateway --region ", {
                                    "Ref": "AWS::Region"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "RDGatewayEIP": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "RDGateway"
                }
            },
            "Type": "AWS::EC2::EIP"
        },
        "RDGatewayRecord": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "HostedZoneName": "getthebuybox.com.",
                "Name": "rdp58.prime.getthebuybox.com.",
                "ResourceRecords": [{
                    "Ref": "RDGatewayEIP"
                }],
                "TTL": "60",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "RDGatewayWaitCondition": {
            "DependsOn": "RDGateway",
            "Properties": {
                "Handle": {
                    "Ref": "RDGatewayWaitConditionHandle"
                },
                "Timeout": 7200
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "RDGatewayWaitConditionHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "SqlAccess": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Sql Access For Tfs server",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Fn::Join": [
                            "", [{
                                    "Fn::GetAtt": [
                                        "tfsserver1",
                                        "PrivateIp"
                                    ]
                                },
                                "/32"
                            ]
                        ]
                    },
                    "FromPort": 1433,
                    "IpProtocol": "Tcp",
                    "ToPort": 1433
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "SqlAccess"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SqlServer4TfsSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Allows communication to SQLServer Service",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.96.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "SqlServer4TfsSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SubnetRouteTableAssociationDMZSubnet": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                },
                "SubnetId": {
                    "Ref": "DMZSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "SubnetRouteTableAssociationPrivateSubnet1": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "TFSServerSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Allows various TFS communication",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "10.0.32.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "CidrIp": "10.0.96.0/20",
                    "FromPort": 3389,
                    "IpProtocol": "Tcp",
                    "ToPort": 3389
                }, {
                    "FromPort": 8080,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "TFSUsers"
                    },
                    "ToPort": 8080
                }, {
                    "FromPort": 8080,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "ElbSecurityGroup"
                    },
                    "ToPort": 8080
                }, {
                    "FromPort": 8080,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "WorkstationSecurityGroup"
                    },
                    "ToPort": 8080
                }, {
                    "CidrIp": {
                        "Fn::Join": [
                            "", [{
                                    "Fn::GetAtt": [
                                        "build",
                                        "PrivateIp"
                                    ]
                                },
                                "/32"
                            ]
                        ]
                    },
                    "FromPort": 8080,
                    "IpProtocol": "Tcp",
                    "ToPort": 8080
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "TFSServerSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "TFSUsers": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Security Group To Contain Users of the TFS Services",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [],
                "Tags": [{
                    "Key": "Name",
                    "Value": "TFSUsers"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "VpcCreatePrimeTest": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [{
                    "Key": "Name",
                    "Value": "VpcCreatePrimeTest"
                }]
            },
            "Type": "AWS::EC2::VPC"
        },
        "VpcCreatePrimeTestInternetGateway": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": "VpcCreatePrimeTestInternetGateway"
                }]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "VpcCreatePrimeTestInternetGatewayAttachment": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "VpcCreatePrimeTestInternetGateway"
                },
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "WorkstationSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Security Group To Contain Workstations",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [],
                "Tags": [{
                    "Key": "Name",
                    "Value": "WorkstationSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "build": {
            "DependsOn": [
                "tfsserver1",
                "dc1"
            ],
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "accessKeyId": "AKIAJMUQ7GPWQNKSODIA",
                        "buckets": [
                            "gtbb"
                        ],
                        "secretKey": "dymzzLz0n2K1per6c2a0+riOtaL+tGqTM4H6T9I3",
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "InstallChefConfigSet": {
                        "commands": {},
                        "files": {
                            "c:/chef/node.json": {
                                "content": {
                                    "domain": "prime",
                                    "domainAdmin": {
                                        "name": "prime\\johnny",
                                        "password": "kasdfiajs!!9"
                                    },
                                    "nothing": "nothing",
                                    "s3_file": {
                                        "key": "AKIAJMUQ7GPWQNKSODIA",
                                        "secret": "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"
                                    }
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "configSets": {
                        "InstallChefConfigSet": [
                            "InstallChefConfigSet"
                        ],
                        "config": [
                            "setup",
                            "rename",
                            "join"
                        ],
                        "finalizeConfigSet": [
                            "finalizeConfig"
                        ],
                        "tfs.tar.gz": [
                            "tfs.tar.gz"
                        ],
                        "vs.tar.gz": [
                            "vs.tar.gz"
                        ]
                    },
                    "finalizeConfig": {
                        "commands": {
                            "a-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "cfn-signal.exe -e 0 \"", {
                                                "Fn::Base64": {
                                                    "Ref": "buildWaitConditionHandle"
                                                }
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-signal-success.log\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "join": {
                        "commands": {
                            "a-set-dns-servers": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
                                                "Fn::GetAtt": [
                                                    "dc1",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"",
                                            " Add-Computer -DomainName ", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('", {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            "\\", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ", {
                                                "Ref": "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\"",
                                            " > \"c:\\cfn\\log\\b-join-domain.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "rename": {
                        "commands": {
                            "1-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "\"Rename-Computer -NewName ",
                                            "build",
                                            " -Restart\"",
                                            " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "setup": {
                        "commands": {
                            "a-disable-win-fw": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                                            " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                                            " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1",
                                "waitAfterCompletion": "15"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[main]\nstack=", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\nregion=", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\ninterval=1\nverbose=true"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.build.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c ",
                                            "config,InstallChefConfigSet,vs.tar.gz,tfs.tar.gz,finalizeConfigSet",
                                            " -s ", {
                                                "Ref": "AWS::StackName"
                                            },
                                            " -r ",
                                            "build",
                                            " --region ", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "sources": {}
                    },
                    "tfs.tar.gz": {
                        "commands": {
                            "tfs--build": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "C:/opscode/chef/bin/chef-client.bat -z -o tfs::build -c c:/chef/tfs.tar.gz/client.rb"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:/chef/tfs.tar.gz/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "cache_path 'c:/chef'\ncookbook_path 'c:/chef/tfs.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {
                            "msi": {
                                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
                            }
                        },
                        "services": {},
                        "sources": {
                            "c:/chef/tfs.tar.gz/": "https://gtbb.s3.amazonaws.com/tfs.tar.gz"
                        }
                    },
                    "vs.tar.gz": {
                        "commands": {
                            "vs--default": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "C:/opscode/chef/bin/chef-client.bat -z -o vs::default -c c:/chef/vs.tar.gz/client.rb"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:/chef/vs.tar.gz/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "cache_path 'c:/chef'\ncookbook_path 'c:/chef/vs.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {
                            "msi": {
                                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
                            }
                        },
                        "services": {},
                        "sources": {
                            "c:/chef/vs.tar.gz/": "https://gtbb.s3.amazonaws.com/vs.tar.gz"
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "30",
                        "VolumeType": "gp2"
                    }
                }, {
                    "DeviceName": "xvdf",
                    "Ebs": {
                        "SnapshotId": "snap-5e27a85a"
                    }
                }, {
                    "DeviceName": "xvdg",
                    "Ebs": {
                        "SnapshotId": "snap-4e69d94b"
                    }
                }],
                "ImageId": "ami-e4034a8e",
                "InstanceType": "t2.small",
                "KeyName": "corp.getthebuybox.com",
                "NetworkInterfaces": [],
                "SecurityGroupIds": [{
                    "Ref": "BuildServerSecurityGroup"
                }, {
                    "Ref": "DomainMemberSG"
                }],
                "SourceDestCheck": true,
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "build"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "<script>cfn-init.exe -v -c ",
                                "config,InstallChefConfigSet,vs.tar.gz,tfs.tar.gz,finalizeConfigSet",
                                " -s ", {
                                    "Ref": "AWS::StackId"
                                },
                                " -r build --region ", {
                                    "Ref": "AWS::Region"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "buildWaitCondition": {
            "DependsOn": "build",
            "Properties": {
                "Handle": {
                    "Ref": "buildWaitConditionHandle"
                },
                "Timeout": 10800
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "buildWaitConditionHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "dc1": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "InstallChefConfigSet": {
                        "commands": {},
                        "files": {
                            "c:/chef/node.json": {
                                "content": {
                                    "domain": "prime",
                                    "nothing": "nothing"
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "configSets": {
                        "InstallChefConfigSet": [
                            "InstallChefConfigSet"
                        ],
                        "config": [
                            "setup",
                            "rename",
                            "installADDS",
                            "configureSites"
                        ],
                        "finalizeConfigSet": [
                            "finalizeConfig"
                        ]
                    },
                    "configureSites": {
                        "commands": {
                            "a-rename-default-site": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            " ",
                                            "\"",
                                            "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName DMZSubnet",
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-rename-default-site.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-rename-default-site.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "b-create-site-2": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "\"",
                                            "New-ADReplicationSite DMZ2Subnet",
                                            "\"",
                                            " > \"c:\\cfn\\log\\b-create-site-2.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\b-create-site-2.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "create-subnet-DMZ2Subnet": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command New-ADReplicationSubnet -Name ",
                                            "10.0.96.0/20",
                                            " -Site ",
                                            "DMZ2Subnet",
                                            " > \"c:\\cfn\\log\\create-subnet-DMZ2Subnet.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\create-subnet-DMZ2Subnet.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "create-subnet-DMZSubnet": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command New-ADReplicationSubnet -Name ",
                                            "10.0.32.0/20",
                                            " -Site ",
                                            "DMZSubnet",
                                            " > \"c:\\cfn\\log\\create-subnet-DMZSubnet.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\create-subnet-DMZSubnet.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "m-set-site-link": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"",
                                            "Get-ADReplicationSiteLink -Filter * | Set-ADReplicationSiteLink -SitesIncluded @{add='DMZ2Subnet'} -ReplicationFrequencyInMinutes 15\"",
                                            " > \"c:\\cfn\\log\\m-set-site-link.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\m-set-site-link.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "finalizeConfig": {
                        "commands": {
                            "a-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "cfn-signal.exe -e 0 \"", {
                                                "Fn::Base64": {
                                                    "Ref": "dc1WaitConditionHandle"
                                                }
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-signal-success.log\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "installADDS": {
                        "commands": {
                            "1-install-prereqsz": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\"",
                                            " > \"c:\\cfn\\log\\1-install-prereqsz.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\1-install-prereqsz.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "2-install-adds": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Install-ADDSForest -DomainName ", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -SafeModeAdministratorPassword (convertto-securestring jhkjhsdf338! -asplaintext -force) -DomainMode Win2012 -DomainNetbiosName ", {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            " -ForestMode Win2012 -Confirm:$false -Force\"",
                                            " > \"c:\\cfn\\log\\2-install-adds.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\2-install-adds.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            },
                            "3-restart-service": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Restart-Service NetLogon -EA 0\"",
                                            " > \"c:\\cfn\\log\\3-restart-service.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\3-restart-service.log\" EXIT 1",
                                "waitAfterCompletion": "20"
                            },
                            "4 - create - adminuser": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"",
                                            "New-ADUser ",
                                            "-Name ", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            " -UserPrincipalName ", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "@", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " ",
                                            "-AccountPassword (ConvertTo-SecureString ", {
                                                "Ref": "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force) ",
                                            "-Enabled $true ",
                                            "-PasswordNeverExpires $true\"",
                                            " > \"c:\\cfn\\log\\4 - create - adminuser.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\4 - create - adminuser.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "5 - update - adminuser": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\5 - update - adminuser.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\5 - update - adminuser.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "rename": {
                        "commands": {
                            "1-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "\"Rename-Computer -NewName ",
                                            "dc1",
                                            " -Restart\"",
                                            " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "setup": {
                        "commands": {
                            "a-disable-win-fw": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                                            " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                                            " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1",
                                "waitAfterCompletion": "15"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[main]\nstack=", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\nregion=", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\ninterval=1\nverbose=true"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.dc1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c ",
                                            "config,InstallChefConfigSet,finalizeConfigSet",
                                            " -s ", {
                                                "Ref": "AWS::StackName"
                                            },
                                            " -r ",
                                            "dc1",
                                            " --region ", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1": {
                                "content": {},
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/activedirectory/latest/scripts/ConvertTo-EnterpriseAdmin.ps1"
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "sources": {}
                    }
                }
            },
            "Properties": {
                "ImageId": "ami-e4034a8e",
                "InstanceType": "t2.micro",
                "KeyName": "corp.getthebuybox.com",
                "NetworkInterfaces": [],
                "SecurityGroupIds": [{
                    "Ref": "DomainControllerSG1"
                }],
                "SourceDestCheck": true,
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "dc1"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "<script>cfn-init.exe -v -c ",
                                "config,InstallChefConfigSet,finalizeConfigSet",
                                " -s ", {
                                    "Ref": "AWS::StackId"
                                },
                                " -r dc1 --region ", {
                                    "Ref": "AWS::Region"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "dc1WaitCondition": {
            "DependsOn": "dc1",
            "Properties": {
                "Handle": {
                    "Ref": "dc1WaitConditionHandle"
                },
                "Timeout": 10800
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "dc1WaitConditionHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "natSecurityGroup": {
            "DependsOn": [],
            "Metadata": {},
            "Properties": {
                "GroupDescription": "Enables Ssh access to NAT1 in AZ1 via port 22 and outbound internet access via private subnets",
                "SecurityGroupEgress": [],
                "SecurityGroupIngress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 22,
                    "IpProtocol": "Tcp",
                    "ToPort": 22
                }, {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": -1,
                    "IpProtocol": "Icmp",
                    "ToPort": -1
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": 1,
                    "IpProtocol": "-1",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.0.0/19",
                    "FromPort": -1,
                    "IpProtocol": "Icmp",
                    "ToPort": -1
                }, {
                    "CidrIp": "10.0.64.0/19",
                    "FromPort": 1,
                    "IpProtocol": "-1",
                    "ToPort": 65535
                }, {
                    "CidrIp": "10.0.64.0/19",
                    "FromPort": -1,
                    "IpProtocol": "Icmp",
                    "ToPort": -1
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "natSecurityGroup"
                }],
                "VpcId": {
                    "Ref": "VpcCreatePrimeTest"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "sql1": {
            "DependsOn": "dc1",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "accessKeyId": "AKIAJMUQ7GPWQNKSODIA",
                        "buckets": [
                            "gtbb"
                        ],
                        "secretKey": "dymzzLz0n2K1per6c2a0+riOtaL+tGqTM4H6T9I3",
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "InstallChefConfigSet": {
                        "commands": {},
                        "files": {
                            "c:/chef/node.json": {
                                "content": {
                                    "domain": "prime",
                                    "nothing": "nothing",
                                    "s3_file": {
                                        "key": "AKIAJMUQ7GPWQNKSODIA",
                                        "secret": "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"
                                    },
                                    "sqlserver": {
                                        "INSTALLSQLDATADIR": "f:\\SqlData",
                                        "SQLUSERDBDIR": "d:\\SqlUserDb",
                                        "SQLUSERDBLOGDIR": "e:\\SqlUserDbLog"
                                    }
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "configSets": {
                        "InstallChefConfigSet": [
                            "InstallChefConfigSet"
                        ],
                        "config": [
                            "setup",
                            "rename",
                            "join"
                        ],
                        "finalizeConfigSet": [
                            "finalizeConfig"
                        ],
                        "sqlserver.tar.gz": [
                            "sqlserver.tar.gz"
                        ]
                    },
                    "finalizeConfig": {
                        "commands": {
                            "a-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "cfn-signal.exe -e 0 \"", {
                                                "Fn::Base64": {
                                                    "Ref": "sql1WaitConditionHandle"
                                                }
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-signal-success.log\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "join": {
                        "commands": {
                            "a-set-dns-servers": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
                                                "Fn::GetAtt": [
                                                    "dc1",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"",
                                            " Add-Computer -DomainName ", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('", {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            "\\", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ", {
                                                "Ref": "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\"",
                                            " > \"c:\\cfn\\log\\b-join-domain.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "rename": {
                        "commands": {
                            "1-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "\"Rename-Computer -NewName ",
                                            "sql1",
                                            " -Restart\"",
                                            " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "setup": {
                        "commands": {
                            "a-disable-win-fw": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                                            " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                                            " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1",
                                "waitAfterCompletion": "15"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[main]\nstack=", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\nregion=", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\ninterval=1\nverbose=true"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.sql1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c ",
                                            "config,InstallChefConfigSet,sqlserver.tar.gz,finalizeConfigSet",
                                            " -s ", {
                                                "Ref": "AWS::StackName"
                                            },
                                            " -r ",
                                            "sql1",
                                            " --region ", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "sources": {}
                    },
                    "sqlserver.tar.gz": {
                        "commands": {
                            "sqlserver--default": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "C:/opscode/chef/bin/chef-client.bat -z -o sqlserver::default -c c:/chef/sqlserver.tar.gz/client.rb"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:/chef/sqlserver.tar.gz/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "cache_path 'c:/chef'\ncookbook_path 'c:/chef/sqlserver.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {
                            "msi": {
                                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
                            }
                        },
                        "services": {},
                        "sources": {
                            "c:/chef/sqlserver.tar.gz/": "https://gtbb.s3.amazonaws.com/sqlserver.tar.gz"
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [{
                    "DeviceName": "xvdf",
                    "Ebs": {
                        "VolumeSize": 20,
                        "VolumeType": "gp2"
                    }
                }, {
                    "DeviceName": "xvdg",
                    "Ebs": {
                        "VolumeSize": 10,
                        "VolumeType": "gp2"
                    }
                }, {
                    "DeviceName": "xvdh",
                    "Ebs": {
                        "VolumeSize": 10,
                        "VolumeType": "gp2"
                    }
                }, {
                    "DeviceName": "xvdi",
                    "Ebs": {
                        "SnapshotId": "snap-2cf80f29"
                    }
                }],
                "ImageId": "ami-e4034a8e",
                "InstanceType": "t2.micro",
                "KeyName": "corp.getthebuybox.com",
                "NetworkInterfaces": [],
                "SecurityGroupIds": [{
                    "Ref": "DomainMemberSG"
                }, {
                    "Ref": "SqlServer4TfsSecurityGroup"
                }, {
                    "Ref": "SqlAccess"
                }],
                "SourceDestCheck": true,
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "sql1"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "<script>cfn-init.exe -v -c ",
                                "config,InstallChefConfigSet,sqlserver.tar.gz,finalizeConfigSet",
                                " -s ", {
                                    "Ref": "AWS::StackId"
                                },
                                " -r sql1 --region ", {
                                    "Ref": "AWS::Region"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "sql1WaitCondition": {
            "DependsOn": "sql1",
            "Properties": {
                "Handle": {
                    "Ref": "sql1WaitConditionHandle"
                },
                "Timeout": 43200
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "sql1WaitConditionHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "tfsserver1": {
            "DependsOn": "sql1",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "accessKeyId": "AKIAJMUQ7GPWQNKSODIA",
                        "buckets": [
                            "gtbb"
                        ],
                        "secretKey": "dymzzLz0n2K1per6c2a0+riOtaL+tGqTM4H6T9I3",
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "InstallChefConfigSet": {
                        "commands": {},
                        "files": {
                            "c:/chef/node.json": {
                                "content": {
                                    "domain": "prime",
                                    "domainAdmin": {
                                        "name": "prime\\johnny",
                                        "password": "kasdfiajs!!9"
                                    },
                                    "nothing": "nothing",
                                    "s3_file": {
                                        "key": "AKIAJMUQ7GPWQNKSODIA",
                                        "secret": "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"
                                    }
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "configSets": {
                        "InstallChefConfigSet": [
                            "InstallChefConfigSet"
                        ],
                        "config": [
                            "setup",
                            "rename",
                            "join"
                        ],
                        "finalizeConfigSet": [
                            "finalizeConfig"
                        ],
                        "tfs.tar.gz": [
                            "tfs.tar.gz"
                        ]
                    },
                    "finalizeConfig": {
                        "commands": {
                            "a-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "cfn-signal.exe -e 0 \"", {
                                                "Fn::Base64": {
                                                    "Ref": "tfsserver1WaitConditionHandle"
                                                }
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-signal-success.log\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "join": {
                        "commands": {
                            "a-set-dns-servers": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ", {
                                                "Fn::GetAtt": [
                                                    "dc1",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "\"",
                                            " > \"c:\\cfn\\log\\a-set-dns-servers.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-dns-servers.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"",
                                            " Add-Computer -DomainName ", {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -Credential ",
                                            "(New-Object System.Management.Automation.PSCredential('", {
                                                "Ref": "DomainNetBIOSName"
                                            },
                                            "\\", {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "',",
                                            "(ConvertTo-SecureString ", {
                                                "Ref": "DomainAdminPassword"
                                            },
                                            " -AsPlainText -Force))) ",
                                            "-Restart\"",
                                            " > \"c:\\cfn\\log\\b-join-domain.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\b-join-domain.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "rename": {
                        "commands": {
                            "1-execute-powershell-script-RenameComputer": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "\"Rename-Computer -NewName ",
                                            "tfsserver1",
                                            " -Restart\"",
                                            " > \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\1-execute-powershell-script-RenameComputer.log\" EXIT 1",
                                "waitAfterCompletion": "forever"
                            }
                        },
                        "files": {},
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {},
                        "sources": {}
                    },
                    "setup": {
                        "commands": {
                            "a-disable-win-fw": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                                            " > \"c:\\cfn\\log\\a-disable-win-fw.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-disable-win-fw.log\" EXIT 1",
                                "waitAfterCompletion": "0"
                            },
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "powershell.exe ",
                                            "-ExecutionPolicy RemoteSigned -Command \"c:\\cfn\\scripts\\Set-StaticIP.ps1\"",
                                            " > \"c:\\cfn\\log\\a-set-static-ip.log\""
                                        ]
                                    ]
                                },
                                "test": "IF EXIST \"c:\\cfn\\log\\a-set-static-ip.log\" EXIT 1",
                                "waitAfterCompletion": "15"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[main]\nstack=", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\nregion=", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\ninterval=1\nverbose=true"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.tfsserver1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c ",
                                            "config,InstallChefConfigSet,tfs.tar.gz,finalizeConfigSet",
                                            " -s ", {
                                                "Ref": "AWS::StackName"
                                            },
                                            " -r ",
                                            "tfsserver1",
                                            " --region ", {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "$netip = Get-NetIPConfiguration;",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {},
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "sources": {}
                    },
                    "tfs.tar.gz": {
                        "commands": {
                            "tfs--applicationtier": {
                                "command": {
                                    "Fn::Join": [
                                        "", [
                                            "C:/opscode/chef/bin/chef-client.bat -z -o tfs::applicationtier -c c:/chef/tfs.tar.gz/client.rb"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:/chef/tfs.tar.gz/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "cache_path 'c:/chef'\ncookbook_path 'c:/chef/tfs.tar.gz/cookbooks'\nlocal_mode true\njson_attribs 'c:/chef/node.json'\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "ignoreErrors": true,
                        "packages": {
                            "msi": {
                                "chef": "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2012r2/i386/chef-client-12.6.0-1-x86.msi"
                            }
                        },
                        "services": {},
                        "sources": {
                            "c:/chef/tfs.tar.gz/": "https://gtbb.s3.amazonaws.com/tfs.tar.gz"
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "214",
                        "VolumeType": "gp2"
                    }
                }, {
                    "DeviceName": "xvdf",
                    "Ebs": {
                        "SnapshotId": "snap-4e69d94b"
                    }
                }],
                "ImageId": "ami-e4034a8e",
                "InstanceType": "t2.small",
                "KeyName": "corp.getthebuybox.com",
                "NetworkInterfaces": [],
                "SecurityGroupIds": [{
                    "Ref": "TFSServerSecurityGroup"
                }, {
                    "Ref": "DomainMemberSG"
                }],
                "SourceDestCheck": true,
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "tfsserver1"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "<script>cfn-init.exe -v -c ",
                                "config,InstallChefConfigSet,tfs.tar.gz,finalizeConfigSet",
                                " -s ", {
                                    "Ref": "AWS::StackId"
                                },
                                " -r tfsserver1 --region ", {
                                    "Ref": "AWS::Region"
                                },
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "tfsserver1WaitCondition": {
            "DependsOn": "tfsserver1",
            "Properties": {
                "Handle": {
                    "Ref": "tfsserver1WaitConditionHandle"
                },
                "Timeout": 10800
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "tfsserver1WaitConditionHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }
    }
}